[
{
	"uri": "//localhost:1313/",
	"title": "Threat Detection &amp; Response Workshop",
	"tags": [],
	"description": "",
	"content": "Threat Detection \u0026amp; Response Workshop Overall This workshop is designed to give you an introduction and then take you deeper into AWS threat detection and response services use cases, best practices, and specific scenarios. This workshop starts with an introduction to services and then focuses on advanced topics of threat detection and response with modules focusing on multi-service solutions, integrations, custom orchestration examples, and examples of responding to specific detections. All of this is designed to prepare you and help you operate more securely on AWS.\nContent Introduction Introduction to threat detection and response services Integrating AWS Services and Partner Solutions Managing and Prioritizing Security Findings Automating Notifications and Response Security Simulations and Scenarios Software Vulnerability Management Clean up resource "
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.1-aws-security-hub/",
	"title": "AWS Security Hub",
	"tags": [],
	"description": "",
	"content": "Content Security Hub - Overview Security Hub - Dashboard Security Hub Findings Security Hub - Pricing Security Hub - Notifications "
},
{
	"uri": "//localhost:1313/3/3.1/",
	"title": "Centralizing findings from AWS security services",
	"tags": [],
	"description": "",
	"content": "Security Hub automatically collects and consolidates findings from AWS security services enabled in your environment, such as intrusion detection findings from Amazon GuardDuty, vulnerability scans from Amazon Inspector, Amazon Simple Storage Service (Amazon S3) bucket policy findings from Amazon Macie, publicly accessible and cross-account resources from IAM Access Analyzer, and resources lacking WAF coverage from AWS Firewall Manager.\nThis aggregation provides a view of security and compliance across your AWS environment. AWS Security Hub aggregates security findings from dozens of AWS security services and APN products in a single place and format, the AWS Security Finding Format (ASFF). Security Hub doesn\u0026rsquo;t retroactively detect and consolidate security findings that were generated before you enabled Security Hub. All findings are stored in Security Hub for 90 days after last update date.\nThe Integrations page in the AWS Management Console provides access to all of the available AWS and third-party product integrations. The AWS Security Hub API also provides operations to allow you to manage integrations. For AWS services, Security Hub automatically enables the integration, and you can optionally disable each integration.\nCentralizing findings from AWS security services Navigate to Security Hub and open the Summary page. The Security Hub Summary page gives you an overview of security and compliance status of your AWS account.\nTake a few minutes to review the insights generated on the Summary page. Can you find the most common threat types identified in your environment? These findings are being aggregated in Security Hub from Amazon GuardDuty.\n3. Open the Integrations page in Security Hub. Scroll through the integrations available. As you can see, many of the integrations, including with \u0026ldquo;Amazon: GuardDuty\u0026rdquo; and \u0026ldquo;Amazon: Inspector\u0026rdquo;, are automatically enabled for you. However, you still need to have each service turned on (in addition to the integration) to generate the respective findings.\nSecurity Hub provides you with the flexibility to enable and disable AWS integrations. Although not usually recommended, try disabling the AWS: Firewall Manager integration. Click Stop accepting findings in the box labeled AWS: Firewall Manager. You will be presented with a popup stating \u0026ldquo;Not accepting findings from this integration means that the product can still try to send findings to Security Hub, but Security Hub will not ingest them.\u0026rdquo; Click Cancel. We should leave this integration on. To see all the security findings from an individual service, you can click use this page to see that. Find the integration for \u0026ldquo;Amazon: GuardDuty\u0026rdquo; and click See findings. This will open the findings page and add a filter so you are only looking at findings from Amazon GuardDuty. Stay on the Findings page.\nYou can optionally remove or change some of the filters to adjust the list of filtered findings you are looking at.\nSearching and reviewing security findings To see all of the findings in Security Hub, remove the filters (and Group By, if one is listed) at the top of the page by clicking the X next to each of the filters.\nThere are many Security Hub findings listed here. Try adding a filter to narrow the list down to high severity findings from the threat detection service, GuardDuty. Click Add filters in the search bar.\nFrom the dropdown, select Severity label and choose is and then input HIGH. This is case-sensitive. Click Apply. Result: Choose one finding to see more information Click Add filters in the search bar again. This time, select Product name and choose is and then input GuardDuty. Click Apply.\nPick one of the findings and click on the title. This opens the finding details pane. Expand all the sections and take a few minutes to review the information here. You can see the description, a link to remediation instructions, information about the resource, and more.\nIn the finding details pane click the finding ID link at the top of the pane to display the complete JSON for the finding. Security Hub processes findings using a standard findings format called the AWS Security Finding Format (ASFF), which eliminates the need for time-consuming data conversion efforts. The finding JSON can be downloaded to a file if ever needed for further investigation. Close out of the JSON pop-up by clicking the X in the top right.\nAt the top of the finding details, open the History tab to view a chronological list of all changes that have been made to the finding. The transparency of finding history helps you identify potential security risks more quickly and take proactive steps to mitigate them.\nClose the finding details pane by clicking the X in the top right, but stay on the findings page.\nLet\u0026rsquo;s try to understand what resources in our environment are generating the most findings. Remove all the filters. Then add a new filter, select Resource type and choose is not and then input AwsAccount. Click Apply. Result: Add another filter. Select Record state, choose is, and then input ACTIVE. Click Apply. Click Add filters in the search bar again. This time, select Group by and choose ResourceId. Click Apply. This list shows you the number of security findings per resource. This can help you prioritize work by the resources in your environment with the most security issues. Result: Generating insights from aggregated findings If you find the list of number of security findings per resource beneficial, you can save it as a custom Insight for future reference. Click Create insight in the top right of the screen.\nName the insight \u0026ldquo;0. Resources by counts of findings\u0026rdquo;. Then click Create insight. In the navigation on the left, click Insights. A Security Hub Insight is a collection of related findings defined by an aggregation statement and optional filters. An insight identifies a security area that requires attention and intervention. Security Hub offers several managed (default) insights that you can\u0026rsquo;t modify or delete. You can also create custom insights to track security issues unique to your AWS environment and usage.\nThe first Insight listed is the one you just created. Click on the title 0. Resources by counts of findings. Here you have the same view as before plus generated graphs. We\u0026rsquo;ll dive deeper into Insights later. Return to the Insights page using the navigation on the left.\nTake a few minutes to review the other AWS-provided Insights. Filter for insight severity.\nClick on 24. Severity by counts of findings.\nSelect a Severity Label (e.g. Critical) to see the underlying finding(s).\nResult: "
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.4-amazon-detective/2.4.1-detective-overview/",
	"title": "Detective - Overview",
	"tags": [],
	"description": "",
	"content": "Detective - Overview Amazon Detective makes it easier to analyze, investigate, and quickly identify the root cause of potential security issues or suspicious activities. Amazon Detective automatically collects log data from your AWS resources and uses machine learning, statistical analysis, and graph theory to build a linked set of data that enables you to easily conduct faster and more efficient security investigations.\nAmazon Detective simplifies the investigative process and helps security teams conduct faster and more effective investigations. Amazon Detective’s prebuilt data aggregations, summaries, and context help you to quickly analyze and determine the nature and extent of possible security issues. Amazon Detective maintains up to a year of aggregated data and makes it easily available through a set of visualizations that shows changes in the type and volume of activity over a selected time window, and links those changes to security findings. There are no upfront costs and you pay only for the events analyzed, with no additional software to deploy or log feeds to enable.\nAmazon Detective extracts time-based events such as login attempts, API calls, and network traffic from AWS CloudTrail, Amazon Virtual Private Cloud (Amazon VPC) Flow Logs, Amazon GuardDuty findings, AWS Security Hub findings, and Amazon Elastic Kubernetes Service (Amazon EKS) audit logs. Detective creates a behavior graph that utilizes machine learning (ML) to create a unified, interactive view of your resource behaviors and their interactions over time, specifically for these time-based events. By exploring the behavior graph, you can analyze security events such as failed login attempts, suspicious APIs call, or finding groups to help you in investigating the root cause of your AWS Security Findings.\nThreat actors often perform a series of actions when attempting to compromise your AWS environment, which can result in multiple security findings across your AWS resources. Finding groups are collections of security findings and resources that are associated with a single potential security incident you should investigate together. Finding groups can help reduce triage time because you don’t have to investigate each individual security finding separately. You can start your investigation with finding groups, which offer a more complete understanding of the incident. It also offers interactive visualizations that allows you to explore specific findings and insights using generative AI to describe the chain of events in natural language.\n"
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.2-amazon-guardduty/2.2.1-guardduty-overview/",
	"title": "GuardDuty - Overview",
	"tags": [],
	"description": "",
	"content": "GuardDuty - Overview Amazon GuardDuty is a threat detection service that continuously monitors for malicious activity and unauthorized behavior across your AWS environment. GuardDuty combines machine learning (ML), anomaly detection, and malicious file discovery, using both AWS and industry-leading third-party sources to help protect your AWS accounts, workloads, and data. GuardDuty is capable of analyzing tens of billions of events across multiple AWS data sources, including AWS CloudTrail logs, Amazon Virtual Private Cloud (Amazon VPC) Flow Logs, and DNS query logs. GuardDuty also monitors Amazon Simple Storage Service (Amazon S3) data events, Amazon Aurora login events, and runtime activity for Amazon Elastic Kubernetes Service (Amazon EKS), Amazon Elastic Compute Cloud (Amazon EC2), and Amazon Elastic Container Service (Amazon ECS)—including serverless container workloads on AWS Fargate.\nGuardDuty gives you accurate threat detection of compromised accounts, which can be difficult to detect quickly if you are not continuously monitoring factors in near real time. GuardDuty can detect signs of account compromise, such as AWS resource access from an unusual geolocation at an atypical time of day. For programmatic AWS accounts, GuardDuty checks for unusual API calls, such as attempts to obscure account activity by disabling CloudTrail logging or taking snapshots of a database from a malicious IP address.\nGuardDuty continuously monitors and analyzes your AWS account and workload event data found in CloudTrail, VPC Flow Logs, and DNS logs. There is no additional security software or infrastructure to deploy and maintain for the foundational protections in GuardDuty. By associating your AWS accounts together, you can aggregate threat detection instead of working on an account-by-account basis. In addition, you do not have to collect, analyze, and correlate large volumes of AWS data from multiple accounts. Focus on how to respond quickly, how to keep your organization secure, and continuing to scale and innovate on AWS.\n"
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.3-amazon-inspector/2.3.1-inspector-overview/",
	"title": "Inspector - Overview",
	"tags": [],
	"description": "",
	"content": "Inspector Amazon Inspector is a vulnerability management service that continually scans AWS workloads for software vulnerabilities and unintended network exposure. With a few steps in the AWS Management Console, you can use Amazon Inspector across all accounts in your organization. Once started, it automatically discovers Amazon Elastic Compute Cloud (EC2) instances, container images residing in Amazon Elastic Container Registry (ECR) and within continuous integration and continuous delivery (CI/CD) tools, and AWS Lambda functions, at scale, and immediately starts assessing them for known vulnerabilities.\nAmazon Inspector calculates a highly contextualized risk score for each finding by correlating common vulnerabilities and exposures (CVE) information with factors such as network access and exploitability. This score is used to prioritize the most critical vulnerabilities to improve remediation response efficiency. All findings are aggregated in the Amazon Inspector console and pushed to AWS Security Hub and Amazon EventBridge to automate workflows. Vulnerabilities found in container images are also sent to Amazon ECR for resource owners to view and remediate. Amazon Inspector empowers security teams and developers of any size to achieve comprehensive infrastructure workload security and compliance across their AWS environments.\n"
},
{
	"uri": "//localhost:1313/7/7.1/",
	"title": "Patching EC2 with Patch Manager",
	"tags": [],
	"description": "",
	"content": " Find the number of security findings by product in Security Hub by opening the Insights page and clicking into Insight: 23. Top products by counts of findings. https://us-east-1.console.aws.amazon.com/securityhub/home?region=us-east-1#/insights/arn:aws:securityhub:::insight/securityhub/default/28 Notice that a significant portion of the security findings in your environment are coming from Inspector.\nClick Inspector to see the list of individual findings. Based on the title of these findings, it appears most of them, if not all of them, are software vulnerabilities.\nNavigate to the Inspector console. https://us-east-1.console.aws.amazon.com/inspector/v2/home?region=us-east-1#/dashboard\nFrom the Inspector dashboard, you can quickly see that most of your EC2 instances and Lambda functions are being scanned. You can also see the vulnerabilities impacting the most instances and images.\nScenario / Problem Statement: Your team has noticed a growing number of security findings from Amazon Inspector. Your team turned on Inspector to continually scan Amazon Elastic Compute Cloud (EC2), AWS Lambda functions, and container images in Amazon ECR for software vulnerabilities. However, based on the number of findings, it doesn\u0026rsquo;t appear anyone is managing those vulnerabilities. You\u0026rsquo;ve been tasked with defining and setting up patch management for your EC2 instances, starting with those being used for development.\nAmazon Inspector is a vulnerability management service that continuously scans your AWS workloads for software vulnerabilities and unintended network exposure. Amazon Inspector automatically discovers and scans running Amazon EC2 instances, container images in Amazon Elastic Container Registry (Amazon ECR), and AWS Lambda functions for known software vulnerabilities and unintended network exposure.\nAmazon Inspector creates a finding when it discovers a software vulnerability or network configuration issue. A finding describes the vulnerability, identifies the affected resource, rates the severity of the vulnerability, and provides remediation guidance. You can analyze findings using the Amazon Inspector console, or view and process your findings through other AWS services.\nPatch Manager, a capability of AWS Systems Manager, automates the process of patching managed nodes with both security-related updates and other types of updates. You can use Patch Manager to apply patches for both operating systems and applications. (On Windows Server, application support is limited to updates for applications released by Microsoft.) You can use Patch Manager to install Service Packs on Windows nodes and perform minor version upgrades on Linux nodes. You can patch fleets of Amazon Elastic Compute Cloud (Amazon EC2) instances, edge devices, on-premises servers, and virtual machines (VMs) by operating system type.\nYou can scan instances to see only a report of missing patches, or you can scan and automatically install all missing patches.\nPatch Manager uses patch baselines, which include rules for auto-approving patches within days of their release, in addition to optional lists of approved and rejected patches. When a patching operation runs, Patch Manager compares the patches currently applied to a managed node to those that should be applied according to the rules set up in the patch baseline. You can choose for Patch Manager to show you only a report of missing patches (a Scan operation), or you can choose for Patch Manager to automatically install all patches it finds are missing from a managed node (a Scan and install operation).\nIn this section you will:\nDefine patch baseline Scan your instances with AWS-RunPatchBaseline via Run Command Review patch compliance for managed nodes Install missing patches using Run Command Schedule patch operations using patch policies Review association created by the patch policy Define patch baseline Navigate to Systems Manager and open Patch Manager from the navigation on the left. https://us-east-1.console.aws.amazon.com/systems-manager/patch-manager?region=us-east-1\nClick Start with an overview, under the \u0026ldquo;Create patch policy\u0026rdquo; button.\nClick the tab, Patch baselines, and then select Create patch baseline.\nOn the \u0026ldquo;Create patch baseline\u0026rdquo; page, input the Name \u0026ldquo;AmazonLinux2SecAndNonSecBaseline\u0026rdquo; in the section Patch baseline details.\nOn the \u0026ldquo;Create patch baseline\u0026rdquo; page, select Operating system \u0026ldquo;Amazon Linux 2\u0026rdquo; in the section Patch baseline details.\nIn the section Approval rules for operating systems, select \u0026ldquo;All\u0026rdquo; Products, \u0026ldquo;Security\u0026rdquo; and \u0026ldquo;Bugfix\u0026rdquo; Classification, and \u0026ldquo;Critical\u0026rdquo; and \u0026ldquo;Important\u0026rdquo; Severity. Select Approve patches after a specified number of days and input \u0026ldquo;14\u0026rdquo; days. Finally, select \u0026ldquo;Critical\u0026rdquo; for Compliance reporting.\nConfirm that Operating system rule 1 looks like the following image.\nClick Add rule to create \u0026ldquo;Operating system rule 2\u0026rdquo;.\nFor \u0026ldquo;Operating system rule 2\u0026rdquo;, leave all the defaults, except set Auto-approval to 7 days, Compliance reporting to \u0026ldquo;Medium\u0026rdquo;, and check the box for Include nonsecurity updates.\nConfirm that Operating system rule 2 looks like the following image.\nAt the bottom of the page, click Create patch baseline. You should see a banner at the top of the page stating \u0026ldquo;Create patch baseline request succeeded\u0026rdquo;. This patch baseline will only scan for or install updates based on the criteria defined within the patch approval rules. If an EC2 instance is missing a patch based on the criteria specified within the patch baseline, the instance will be flagged as noncompliant.\nScan your instances with AWS-RunPatchBaseline via Run Command Using Run Command, a capability of AWS Systems Manager, you can remotely and securely manage the configuration of your managed nodes. A managed node is any Amazon Elastic Compute Cloud (Amazon EC2) instance or non-EC2 machine in your hybrid and multi-cloud environment that has been configured for Systems Manager. Run Command allows you to automate common administrative tasks and perform one-time configuration changes at scale.\nAWS Systems Manager supports AWS-RunPatchBaseline, a Systems Manager document (SSM document) for Patch Manager, a capability of AWS Systems Manager. This SSM document performs patching operations on managed nodes for both security related and other types of updates. When the document is run, it uses the patch baseline specified as the \u0026ldquo;default\u0026rdquo; for an operating system type if no patch group is specified. Otherwise, it uses the patch baseline that is associated with the patch group.\nYou can learn more about the AWS-RunPatchBaseline SSM document under the Documents section of Systems Manager or in the documentation here: https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-aws-runpatchbaseline.html\nOpen Run Command from the left navigation.\nClick the Run command button.\nSearch for and select the AWS-RunPatchBaseline.\nUnder Command parameters, make sure \u0026ldquo;Scan\u0026rdquo; is the Operation selected. Leave all the other default parameters.\nUnder Target selection, specify instance tags. Input \u0026ldquo;Environment\u0026rdquo; for Tag key and \u0026ldquo;Development\u0026rdquo; for Tag value.\nClick Add next to the key value pair you just entered.\nUnder Output options deselect Enable an S3 bucket.\nClick Run at the bottom of the page. Refresh the page until the overall status is \u0026ldquo;Success\u0026rdquo;.\nUnder Targets and outputs, click the Instance ID of one of the EC2 instances targeted (that has the key-value pair you specified) to view the output from the command execution. Take a minute to review the outputs of each step.\nStep 2: Step 3: Review patch compliance for managed nodes Return to the Patch Manager dashboard using the navigation in Systems Manager. https://us-east-1.console.aws.amazon.com/systems-manager/patch-manager/dashboard?region=us-east-1\nHere you\u0026rsquo;ll notice that some of your EC2 instances are not compliant and multiple nodes are missing patches.\nOpen the Compliance reporting tab and review the instances listed along with their compliance status and other information, such as missing patches.\nSelect one of the EC2 instances that has a compliance status of Not compliant.\nClick the link for that instance in the Security non-compliant count column.\nThis page shows the patch summary for the instance. You can optionally select missing patches to see more details.\nInstall missing patches using Run Command Return to the Run Command page in Systems Manager and click the button for Run Command.\nFrom the list of command documents, search for and select AWS-RunPatchBaseline.\nThis time, under Command parameters, set Operation to \u0026ldquo;Install\u0026rdquo;.\nAgain, under Target selection, set Tag key to \u0026ldquo;Environment\u0026rdquo; and Tag value to \u0026ldquo;Development\u0026rdquo;. Click Add.\nExpand the Rate control section and set Concurrency targets to 1 and Error threshold to 1.\nDeselect Enable an S3 bucket under Output options.\nClick the button to Run at the bottom of the page. This will take 3-5 minutes to complete. If any updates are installed by Patch Manager, the patched instance is rebooted by default. Refresh the page until you see \u0026ldquo;Success\u0026rdquo;.\nTo check what instances are still missing patches, return to the Patch Manager dashboard and open the Compliance reporting tab. You should see there are no missing patches!\nSchedule patch operations using patch policies A patch policy is a configuration you set up using Quick Setup, a capability of AWS Systems Manager. Patch policies provide more extensive and more centralized control over your patching operations than is available with other methods of configuring patching. A patch policy defines the schedule and baseline to use when automatically patching your nodes and applications.\nInstead of using other methods of patching your nodes, use a patch policy to take advantage of these major features:\nSingle setup – Setting up patching operations using a maintenance window or State Manager association can require multiple tasks in different parts of the Systems Manager console. Using a patch policy, all your patching operations can be set up in a single wizard. Multi-account/Multi-Region support – Using a maintenance window, a State Manager association, or the Patch now feature in Patch Manager, you\u0026rsquo;re limited to targeting managed nodes in a single AWS account-AWS Region pair. If you use multiple accounts and multiple Regions, your setup and maintenance tasks can require a great deal of time, because you must perform setup tasks in each account-Region pair. However, if you use AWS Organizations, you can set up one patch policy that applies to all your managed nodes in all AWS Regions in all your AWS accounts. Or, if you choose, a patch policy can apply to only some organizational units (OUs) in the accounts and Regions you choose. A patch policy can also apply to a single local account, if you choose. Installation support at the organizational level – The existing Host Management configuration option in Quick Setup provides support for a daily scan of your managed nodes for patch compliance. However, this scan is done at a predetermined time and results in patch compliance information only. No patch installations are performed. Using a patch policy, you can specify different schedules for scanning and installing. You can also choose the frequency and time of these operations by using custom CRON or Rate expressions. For example, you could scan for missing patches every day to provide you with regularly updated compliance information. Your installation schedule could be just once a week to avoid unwanted downtime. Simplified patch baseline selection – Patch policies still incorporate patch baselines, and there are no changes to the way patch baselines are configured. However, when you create or update a patch policy, you can select the AWS managed or custom baseline you want to use for each operating system (OS) type in a single list. It’s not necessary to specify the default baseline for each OS type in separate tasks. Return to the Patch Manager dashboard using the navigation in Systems Manager. https://us-east-1.console.aws.amazon.com/systems-manager/patch-manager/dashboard?region=us-east-1\nClick Create patch policy. If the AWS Quick Setup is displayed prompting you to Get started with Quick Setup, select us-east-1 as the home region and click the Get started button.\nOn the Create patch policy page, set the Configuration name to \u0026ldquo;patch-policy-workshop\u0026rdquo;.\nFor Scanning and installation, select Scan and install.\nFor Installation schedule, select Custom install schedule.\nFor Installation frequency, select Custom CRON Expression and then input the CRON expression \u0026ldquo;cron(30 23 ? * SAT *)\u0026rdquo; to install updates on Saturday at 23:30 UTC.\nMake sure Wait to install updates until first CRON interval. is selected.\nUnder Patch baseline, select Custom patch baseline.\nUnder View or change baselines, for \u0026ldquo;Amazon Linux 2\u0026rdquo; select \u0026ldquo;AmazonLinux2SecAndNonSecBaseline\u0026rdquo;.\nDeselect Write output to S3 bucket.\nUnder Targets, select Specify node tag.\nBelow \u0026ldquo;Instance tag details\u0026rdquo;, click Add. Input \u0026ldquo;Environment\u0026rdquo; for Key and \u0026ldquo;Development\u0026rdquo; for Value.\nFor Rate control, input \u0026ldquo;50\u0026rdquo; Percentage for both Concurrency and Error threshold.\nCheck the box to Add required IAM policies to existing instance profiles attached to your instances.\nClick Create. The Patch Manager Quick Setup will take approximately 2 minutes to update. Wait for the banner to display \u0026ldquo;Your Patch Manager Quick Setup configuration was successfully updated.\u0026rdquo;\nReview association created by the patch policy Open State Manager using the navigation on the left in Systems Manager. https://us-east-1.console.aws.amazon.com/systems-manager/state-manager?region=us-east-1#\nFrom the list of Associations, find the association starting with \u0026ldquo;AWS-QuickSetup-PatchPolicy-ScanForPatches-LA-\u0026rdquo; Click the link for association id to open the description.\nIf the Status is \u0026ldquo;Failed\u0026rdquo; or \u0026ldquo;Pending\u0026rdquo;, click Apply association now to run the patch operation now. If prompted with \u0026ldquo;Are you sure you want to send the request to apply this association now?\u0026rdquo; click Apply again.\nWait 2-3 minutes for the status to show \u0026ldquo;Success\u0026rdquo;.\nOpen the association starting with \u0026ldquo;AWS-QuickSetup-PatchPolicy-ScanForPatches-LA-\u0026rdquo; again. Review the information under each tab, starting with Description and ending with Execution history.\n"
},
{
	"uri": "//localhost:1313/4/4.1/",
	"title": "Prioritizing findings at scale with automations",
	"tags": [],
	"description": "",
	"content": "Automate elevating finding severity The first automation you will set up will be to elevate the severity of priority findings for business critical applications. Specifically, we want to elevate the severity of all GuardDuty findings for EC2 instances tagged for production.\nOpen the Automations page in Security Hub.\nClick Create rule.\nFor this automation rule, we\u0026rsquo;ll start with a template. Leave \u0026ldquo;Create a rule from template\u0026rdquo; selected and under Rule template pick Elevate severity of findings that relate to important resources. Change the Rule name to \u0026ldquo;Elevate severity of GuardDuty findings that relate to production EC2 instances\u0026rdquo;.\nCopy the rule name into the Rule description or type your own description.\nTake a moment to review the rule. We\u0026rsquo;ll need to change some of the criteria for our use case.\nChange the Value of the first criteria (Key: ProductName) to \u0026ldquo;GuardDuty\u0026rdquo;.\nClick Remove next to the criteria, Key: ComplianceStatus.\nClick Remove next to the last criteria (Key: ResourceId).\nClick Add criteria. For Key select ResourceTags. For Operator select EQUALS. For Value, input \u0026ldquo;Environment\u0026rdquo; into the top box and \u0026ldquo;Production\u0026rdquo; into the bottom box (this is the key-value pair for the tag). In the Preview of findings that match criteria click Refresh to make sure you configured everything correctly. You should see a preview of the existing findings that meet the criteria.\nFor this rule, we\u0026rsquo;ll elevate all the matching findings to HIGH severity. If implementing this for your organization, you may want an additional rule to elevate findings from GuardDuty that are originally HIGH to CRITICAL. In the section, Automated action, set Severity to HIGH.\nLeave the other default settings and click Create rule. Result: Automate adding user defined fields to production alerts There are circumstances where you may want to identify alerts on production resources, but not elevate the severity. One approach to this is adding notes and user defined fields. The next automation you will set up will be to add notes and user defined fields to any findings from an accounts we identify as production.\nReturn to the Automations page in Security Hub.\nClick Create rule.\nFor this automation rule, we\u0026rsquo;ll select Create custom rule.\nChange the Rule name to \u0026ldquo;Tag production findings\u0026rdquo;.\nChange the Rule description to \u0026ldquo;Tag findings for resources in production accounts\u0026rdquo;.\nFor this rule, we only need one criteria. Set the Key to AwsAccountId. Set Operator to EQUALS. Set Value to the ID of the account you are in right now. The account ID can be found in the top right-hand corner of the AWS console. Make sure there are no spaces or dashes when copying the account ID. Click Refresh to preview the findings that meet the criteria. Note to Participants: Do to limitations in Workshop Studio, you only have one account, so this automation rule will apply to every one of your findings. However, in a multi-account architecture where you have set up a delegated admin through AWS Organization, you will be able to follow the same instructions and identify one or more accounts, selectively, as production.\nScroll down to Automated action. For Note input \u0026ldquo;This finding is in a production account (identified via automation rule)\u0026rdquo;.\nClick Add another key-value pair. For Key input \u0026ldquo;Environment\u0026rdquo;. For Value input \u0026ldquo;Production\u0026rdquo;. Leave the other default settings and click Create rule.\nIf you want to review a rule you created, you can click the Name of the rule from the Automations page. Click the name Tag Production findings.\nAnother rule: Automate adding user defined fields to findings aligned to organization goals Next, set up automation similar to the last automation rule, but instead of adding user-defined fields to findings in production accounts, add them to findings that meet the criteria of an organization goal. In this case, the organization goal will be to secure AWS accounts and IAM. To implement this, your automation criteria will be findings from Security Hub controls for \u0026ldquo;Account\u0026rdquo; and \u0026ldquo;IAM\u0026rdquo;.\n(The index 35 is from Workshop, not a mistake from the author) Return to the Automations page in Security Hub.\nClick Create rule.\nSelect Create custom rule.\nChange the Rule name to \u0026ldquo;Tag findings for security goal\u0026rdquo;.\nChange the Rule description to \u0026ldquo;Tag findings for security goal, secure IAM and accounts.\u0026rdquo;.\nWe want our criteria to match all findings for Security Hub controls for \u0026ldquo;Account\u0026rdquo; or \u0026ldquo;IAM\u0026rdquo;. Under Criteria, select GeneratorId for Key.\nSelect PREFIX for Operator. By selecting \u0026ldquo;PREFIX\u0026rdquo; we don\u0026rsquo;t need criteria for every individual control. If you have enabled \u0026ldquo;Consolidated control findings\u0026rdquo; (which is the case for this account), you will just need to look for 2 control ID prefixes.\nFor Value, input \u0026ldquo;security-control/Account\u0026rdquo;. This will match any finding for a Security Hub control ID starting with \u0026ldquo;security-control/Account\u0026rdquo;.\nBelow the Value input box, click Add another value. This will create a second Operator and Value input for the same Key.\nFor the second Operator and Value, input PREFIX and \u0026ldquo;security-control/IAM\u0026rdquo;, respectively. Click Refresh to preview the matching findings.\nUnder Automated action, click Add another key-value pair. For Key, input \u0026ldquo;security-goal\u0026rdquo;. For Value, input \u0026ldquo;account-and-iam\u0026rdquo;.\nLeave the other default settings and click Create rule. Remember, you can use user-defined fields for filtering findings and creating insights in Security Hub if you want an easy we way track goals at an organization and account level. Review findings updated by automation rules Navigate to the Findings page in Security Hub.\nLook for a finding that has the comment icon next to the Updated at time.\nClick the title of a finding that has the comment icon next to the Updated at time to open the finding details. Expand the Notes section to see the note created by our automation rule.\nClick the History tab at the top of the finding details. You can see the timestamp of when and how the finding was updated by the automation rule. Watch another finding (after 5 minutes): See the whole history: After 3 more minutes, the note is updated: "
},
{
	"uri": "//localhost:1313/6/6.1/",
	"title": "Respond to IAM Role credential exfiltration",
	"tags": [],
	"description": "",
	"content": "In this module, you will take manual steps to simulate a scenario (IAM Role credential exfiltration) that you will then investigate and remediate. You will copy IAM temporary security credentials from the EC2 instance and use them to make API calls from your laptop. Then you will investigate the GuardDuty finding for this activity.\nRetrieve the IAM temporary security credentials using AWS Systems Manager To simulate this threat you will retrieve the IAM temporary security credentials generated by the IAM Role for EC2. You can either SSH directly into the instance and query the metadata or follow the steps below using AWS Systems Manager Session Manager .\nSession Manager is a managed service that provides you with one-click secure access to your instances without the need to open inbound ports and manage bastion hosts. You have centralized access control over who can access your instances and full auditing capabilities to ensure compliance with corporate policies.\nGo to Session Manager in the AWS Systems Manager console.\nClick the Start Session button.\nSelect the GuardDuty-ICE-Instance and click Start session. This will start a shell session that you will use to fetch the active security credentials on the instance. In the shell, run the following command:\nTOKEN=`curl -X PUT \u0026#34;http://169.254.169.254/latest/api/token\u0026#34; -H \u0026#34;X-aws-ec2-metadata-token-ttl-seconds: 21600\u0026#34;` \u0026amp;\u0026amp; curl -H \u0026#34;X-aws-ec2-metadata-token: $TOKEN\u0026#34; http://169.254.169.254/latest/meta-data/ Then run this:\ncurl -H \u0026#34;X-aws-ec2-metadata-token: $TOKEN\u0026#34; http://169.254.169.254/latest/meta-data/iam/security-credentials/GDWorkshop-EC2-Compromised 5. Make note of the AccessKeyID, SecretAccessKey, and Token. Now that you have retrieved the IAM temporary security credentials from the EC2 instance, use them to setup an AWS CLI profile on your local machine. Then we\u0026rsquo;ll use the profile to make API calls.\nUse the security credentials from your laptop Scenario / Problem Statement: In the following steps, you will simulate credential exfiltration. For successful simulation, the API calls need to come from outside the AWS network or they will not generate a findings. You must run the following commands from your local machine. Do not run the commands from AWS CloudShell, from another AWS resource, or while on an AWS VPN.\nYou will need the AWS CLI installed on your local machine for the next set of steps. If you do not have the AWS CLI installed on your local machine, see the documentation for setup instructions: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html\nFrom a command prompt, run the following commands (replacing , , and with your credentials). Make sure the region corresponds to the region you have been working in. aws configure set profile.badbob.region us-east-1 aws configure set profile.badbob.aws_access_key_id \u0026lt;AccessKeyId\u0026gt; aws configure set profile.badbob.aws_secret_access_key \u0026lt;SecretAccessKey\u0026gt; aws configure set profile.badbob.aws_session_token \u0026lt;Token\u0026gt; Now that you have your profile, you can use it to make API calls. Explore what you have access to by running the following commands to query different services. Don\u0026rsquo;t be surprised if you see some access denied responses, it is intended. Run the following commands. Do you have any IAM permissions? aws iam get-user --profile badbob Answer: This command should return an AccessDenied error.\naws iam create-user --user-name Chuck --profile badbob 8. What about DynamoDB? Try the following commands.\naws dynamodb list-tables --profile badbob\naws dynamodb describe-table --table-name GuardDuty-Example-Customer-DB --profile badbob The role and instance profile being used here does not conform to least-priviledge principles. Learn more here: https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege\nCan you query the data? aws dynamodb scan --table-name GuardDuty-Example-Customer-DB --profile badbob Continue to run the other commands:\naws dynamodb scan --table-name GuardDuty-Example-Customer-DB --profile badbob\naws dynamodb delete-table --table-name GuardDuty-Example-Customer-DB --profile badbob Check resources after deleting: aws dynamodb list-tables --profile badbob\nDo you have access to Systems Manager Parameter Store? Answer: No. aws ssm describe-parameters --profile badbob\naws ssm get-parameters --names \u0026quot;gd_prod_dbpwd_sample\u0026quot; --profile badbob\naws ssm get-parameters --names \u0026quot;gd_prod_dbpwd_sample\u0026quot; --with-decryption --profile badbob\naws ssm delete-parameter --name \u0026quot;gd_prod_dbpwd_sample\u0026quot; --profile badbob Investigate the GuardDuty finding It can take up to 30 minutes to see the finding from these actions in the GuardDuty console. We recommend working on the next module and coming back to this step later.\nScenario / Problem Statement You have been assigned a GuardDuty finding to investigate and remediate. The GuardDuty finding type is \u0026ldquo;UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration.OutsideAWS\u0026rdquo;.\nIn the steps above, you simulated IAM Role credential exfiltration. Now you will investigate the GuardDuty finding generated as a result of the actions you took. Begin by navigating to the GuardDuty console .\nYou should see a finding with the type UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration.OutsideAWS. If you do not see the finding, you may need to refresh the page and/or wait a few minutes.\nClick on the UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration.OutsideAWS finding to view the full details. Looking at the finding details you can see that this is a HIGH severity finding. This finding informs you of attempts to run AWS API operations from a host outside of EC2, using temporary AWS credentials that were created on an EC2 instance in your AWS account. This indicates your EC2 instance has been compromised, and the temporary credentials from the instance have been exfiltrated to a remote host outside of AWS. Review the automated remediation In this scenario, there is already automated remediation for this finding type set up using Amazon EventBridge and AWS Lambda. AWS Lambda is a serverless, event-driven compute service that lets you run code for virtually any type of application or backend service without provisioning or managing servers. You can trigger Lambda from over 200 AWS services, and only pay for what you use. Amazon EventBridge is a serverless event bus that makes it easier to build event-driven applications at scale using events generated from your applications and AWS services. EventBridge delivers a stream of real-time data from event sources to targets like AWS Lambda. Let\u0026rsquo;s review the automation and see if it worked!\nNavigate to the Amazon EventBridge console . From the left navigation, under the Buses section, click Rules.\nClick on the rule Name that was configured for this particular finding, GuardDuty-Event-IAMUser-InstanceCredentialExfiltration. Take a look at the Event Pattern. Event patterns have the same structure as the events they match. Rules use event patterns to select events and send them to targets. An event pattern either matches an event or it doesn\u0026rsquo;t. Here you can see we are only matching events with the type \u0026ldquo;UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration.OutsideAWS\u0026rdquo; from \u0026ldquo;aws.guardduty\u0026rdquo;. JSON result:\n{\r\u0026#34;source\u0026#34;: [\u0026#34;aws.guardduty\u0026#34;],\r\u0026#34;detail\u0026#34;: {\r\u0026#34;type\u0026#34;: [\u0026#34;UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration.OutsideAWS\u0026#34;]\r}\r} When an event matches the Event pattern seen above, it can be sent to Targets. Click on the Targets tab. This rule is configured to send these findings to a Lambda function and an SNS topic. 17. Let\u0026rsquo;s check out the Lambda function that we are sending these findings to. Go to the Lambda console and click the function named GDWorkshop-Remediation-InstanceCredentialExfiltration. The Lambda function retrieves the Role name from the finding details and then attaches an IAM policy that revokes all active sessions for the role.\nfrom __future__ import print_function\rfrom botocore.exceptions import ClientError\rimport json\rimport datetime\rimport boto3\rimport os\rdef handler(event, context):\r# Log out event\rprint(\u0026#34;log -- Event: %s \u0026#34; % json.dumps(event))\r# Create generic function response\rresponse = \u0026#34;Error auto-remediating the finding.\u0026#34;\rtry:\r# Set Clients\riam = boto3.client(\u0026#39;iam\u0026#39;)\rec2 = boto3.client(\u0026#39;ec2\u0026#39;)\r# Set Role Variable\rrole = event[\u0026#39;detail\u0026#39;][\u0026#39;resource\u0026#39;][\u0026#39;accessKeyDetails\u0026#39;][\u0026#39;userName\u0026#39;]\r# Current Time\rtime = datetime.datetime.utcnow().isoformat()\r# Set Revoke Policy\rpolicy = \u0026#34;\u0026#34;\u0026#34;\r{\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: {\r\u0026#34;Effect\u0026#34;: \u0026#34;Deny\u0026#34;,\r\u0026#34;Action\u0026#34;: \u0026#34;*\u0026#34;,\r\u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;,\r\u0026#34;Condition\u0026#34;: {\u0026#34;DateLessThan\u0026#34;: {\u0026#34;aws:TokenIssueTime\u0026#34;: \u0026#34;%s\u0026#34;}}\r}\r}\r\u0026#34;\u0026#34;\u0026#34; % time\r# Add policy to Role to Revoke all Current Sessions\riam.put_role_policy(\rRoleName=role,\rPolicyName=\u0026#39;RevokeOldSessions\u0026#39;,\rPolicyDocument=policy.replace(\u0026#39;\\n\u0026#39;, \u0026#39;\u0026#39;).replace(\u0026#39; \u0026#39;, \u0026#39;\u0026#39;)\r)\rresponse = \u0026#34;GuardDuty Remediation | ID:%s: GuardDuty discovered EC2 IAM credentials (Role: %s) being used outside of the EC2 service. All sessions have been revoked. Please follow up with any additional remediation actions.\u0026#34; % (event[\u0026#39;detail\u0026#39;][\u0026#39;id\u0026#39;], role)\rexcept ClientError as e:\rprint(e)\rprint(\u0026#34;log -- Response: %s \u0026#34; % response)\rreturn response Verify that the remediation was successful To verify that the InstanceCredentialExfiltration finding was remediated, you can run one of the CLI commands you ran earlier on you local machine again. You should see an error response \u0026ldquo;with an explicit deny in an identity-based policy\u0026rdquo;. aws dynamodb list-tables --profile badbob\nNote to Participants It may take a few minutes for the remediation to complete.\nYou can also view the Role to evaluate the policy that was attached. Navigate to the AWS IAM console.\nClick Roles in the left navigation.\nClick on the Role you identified in the GuardDuty finding, GDWorkshop-EC2-Compromised.\nUnder the the Permissions tab, click the RevokeOldSessions policy. Notice the explicit deny all.\n"
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.1-aws-security-hub/2.1.1-security-hub-overview/",
	"title": "Security Hub - Overview",
	"tags": [],
	"description": "",
	"content": "Security Standards Navigate to AWS Security Hub summary page. 2. From the Summary page, you can see what standards have been enabled in your account, and you can see the number of passed and failed controls per standard. The percentage is the percent of controls in a \u0026ldquo;passed\u0026rdquo; compliance status compared to the number of controls that have a \u0026ldquo;passed\u0026rdquo; or \u0026ldquo;failed\u0026rdquo; compliance status.\nClick on Security standards from the navigation on the left. Standards were enabled using CloudFormation when the workshop was provisioned. Let\u0026rsquo;s dive into one of the standards. Click View Results for NIST Special Publication 800-53 Revision 5. Controls From the top of the page, you can select tabs to show only \u0026ldquo;Passed\u0026rdquo;, \u0026ldquo;Failed\u0026rdquo;, \u0026ldquo;Disabled\u0026rdquo;, etc. controls. You can also filter to a control using the search bar that says \u0026ldquo;Filter all enabled controls\u0026rdquo;. Click the search bar and filter on ID. Specify ID = EC2.13. Click on the Title: Security groups should not allow ingress from 0.0.0.0/0 to port 22. This presents a view of all resources evaluated for this particular control and the current status of each resource as it relates to the control. Notice there are some resources with a FAILED status and some with a PASSED status. AWS Security Hub Security Standards provide remediation instructions for each check. At the top of the page click the Remediation instructions link to open guidance in a new tab. Investigating a misconfigured resource Return to the Security Hub control you were looking at. For one of the FAILED resources open Config rule in the Investigate column. This will display links that will take you to AWS Config to view the configuration timeline for this resource or the overall config rule that performed the evaluation on this resource. Click Configuration timeline. This opens AWS Config, and shows the resource configuration timeline for this security group. From here, you can investigate the point in time when the resource became non-compliant by reviewing the timestamped events. If you want, take a minute to expand a couple of the events. Expand a CloudTrail Event listed. Then click CloudTrail under View event. This opens up that event, logged in CloudTrail. AWS CloudTrail monitors and records account activity across your AWS infrastructure, giving you control over storage, analysis, and remediation actions. Consolidated controls Return to Security Hub and open General settings page from the navigation panel. https://console.aws.amazon.com/securityhub/home?#/settings/general At the top of the page, you should see that both \u0026ldquo;Auto-enable new controls in enabled standards\u0026rdquo; and \u0026ldquo;Consolidated control findings\u0026rdquo; is enabled.\nClick Controls from the navigation panel. This page shows a similar view to what you reviewed at the standard level, but here you see the full list of consolidated controls. This makes it easier to see how many individual controls in your account are passing, failing, or in some other state. Additionally, with consolidated findings enabled, controls included in multiple enabled standards no longer generate a finding per standard (duplicates). This helps manage the number of findings in your environment and removes potential confusion around duplicate findings.\nInsights In the navigation on the left, click Insights. In the search bar, input \u0026ldquo;severity\u0026rdquo; and select the insight named 24. Severity by counts of findings. Security Hub offers several built-in managed insights. You cannot modify or delete managed insights. 24. Severity by counts of findings is one of the managed insights. Take a minute to review the number of findings in the environment. Select a Severity Label (e.g. Critical) to see the underlying finding(s). "
},
{
	"uri": "//localhost:1313/5/5.1/",
	"title": "Setting up notifications",
	"tags": [],
	"description": "",
	"content": "After Security Hub has ingested a finding identifying a threat or stating that a configuration that needs attention, the next step is take action and resolve the finding. With Amazon EventBridge, you can automate your AWS services to respond automatically to system events such as application availability issues or resource changes.\nAmazon EventBridge is a serverless event bus that makes it easier to build event-driven applications at scale using events generated from AWS services. Events from AWS services are delivered to EventBridge in near-real time and on a guaranteed basis. You can write simple rules to indicate which events you are interested in and what automated actions to take when an event matches a rule. The actions that can be automatically triggered include the following:\nInvoking an AWS Lambda function Activating an AWS Step Functions state machine Notifying an Amazon SNS topic or an Amazon SQS queue Sending a finding to a third-party ticketing, chat, SIEM, or incident response and management tool Security Hub automatically sends all new findings and all updates to existing findings to EventBridge as EventBridge events. You can also create custom actions that allow you to send selected findings and insight results to EventBridge. You then configure EventBridge rules to respond to each type of event.\nIn this module, we will create an EventBridge rule to automate notifications on a filtered list of findings from Security Hub. We will configure Amazon Simple Notification Service so we will receive email alerts when we receive a HIGH or CRITICAL severity finding in Security Hub. Amazon Simple Notification Service (Amazon SNS) is a fully managed messaging service for both application-to-application (A2A) and application-to-person (A2P) communication.\nIn a real-world scenario, this particular example would not scale, but it will demonstrate how AWS Security Hub works with Amazon EventBridge.\nConfigure Amazon Simple Notification Service topic Navigate to Amazon SNS.\nClick Topics in the left navigation.\nClick Create topic.\nSelect Standard type.\nFor the name, enter \u0026ldquo;high-severity-security-hub-findings\u0026rdquo;. Result:\nLeave everything else as is and click Create topic at the bottom of the page. This will create the topic. Subscribe to the topic From the high-severity-security-hub-findings topic page, click Create subscription.\nOn the Create subscription page, under Protocol, select Email.\nOn the Create subscription page, under Endpoint, enter your email address that you want to use for this workshop to receive notifications. You can unsubscribe at the end of the workshop.\nClick Create subscription. Within a couple minutes, you will receive an email at the email address you entered. Confirm the subscription by clicking Confirm subscription in the email.\nCreate an EventBridge Rule to send findings to the topic Now that we have subscribed to our SNS topic, we are ready to send findings to the topic. To do this, we will create an EventBridge rule that matches Security Hub events for HIGH and CRITICAL severity findings.\nNavigate to Amazon EventBridge. https://console.aws.amazon.com/events/home\nClick Create rule.\nOn the Define rule detail page, name your rule \u0026ldquo;high-severity-security-hub-findings\u0026rdquo;.\nClick Next.\nOn the Build event pattern page, in the Event pattern section, click Edit pattern.\nInput the following Event Pattern: {\r\u0026#34;source\u0026#34;: [\u0026#34;aws.securityhub\u0026#34;],\r\u0026#34;detail\u0026#34;: {\r\u0026#34;findings\u0026#34;: {\r\u0026#34;Severity\u0026#34;: {\r\u0026#34;Label\u0026#34;: [\u0026#34;HIGH\u0026#34;, \u0026#34;CRITICAL\u0026#34;]\r}\r}\r}\r} Click Next.\nOn the Select target(s) page, from the Select a target dropdown, select SNS topic.\nThen from the Topic dropdown, select high-severity-security-hub-findings. Click Next.\nOn the Configure tags - optional page, click Next.\nOn the Review and create page, click Create rule. Test the notifications The EventBridge rule we configured will push a notification on any update or new Security Hub finding that have a severity label of \u0026ldquo;HIGH\u0026rdquo; or \u0026ldquo;CRITICAL\u0026rdquo;. We could wait for a new or updated finding, but it will be faster to test this by updating a finding ourselves. An easy way to do this is by changing the Workflow status of a finding.\nFor findings, the workflow status tracks the progress of your investigation into a finding. The workflow status is specific to an individual finding. It does not affect the generation of new findings.\nReturn to Security Hub.\nOpen the Findings page.\nAdd a new filter, for Severity label is HIGH. This is case sensitive. Click Apply. Click the title for any of the high severity findings to open it.\nUnder the Workflow status dropdown in the finding details, change the workflow from New to Notified. You will see a banner display \u0026ldquo;Successfully changed workflow status\u0026rdquo;. This update will result in you receiving an email containing the JSON for this finding. You will want to unsubscribe from these notifications before completing the workshop. Notification: Challenge At this point you understand most of the basics of how AWS Security Hub works with Amazon EventBridge. Let\u0026rsquo;s put that knowledge to the test.\nAfter configuring the notification for all HIGH and CRITICAL findings, you realized that you are getting too many notifications between resource compliance changes, the resolution of findings, and co-workers changing the workflow status of findings.\nUsing what you learned so far, try to modify the notification you set up to only email you findings with a HIGH severity label, that have a workflow status of New, and that Security Hub receives from GuardDuty (findings must match all 3 conditions). Amazon GuardDuty is a threat detection service that continuously monitors your AWS accounts and workloads for malicious activity and delivers detailed security findings for visibility and remediation. These are alerts you want to act on quickly.\n"
},
{
	"uri": "//localhost:1313/1-workshop-instructions/",
	"title": "Workshop Instructions",
	"tags": [],
	"description": "",
	"content": "This workshop is designed to give you an introduction and then take you deeper into AWS threat detection and response services use cases, best practices, and specific scenarios. This workshop starts with an introduction to services and then focuses on advanced topics of threat detection and response with modules focusing on multi-service solutions, integrations, custom orchestration examples, and examples of responding to specific detections. All of this is designed to prepare you and help you operate more securely on AWS.\nAvailable labs Introduction to Threat Detection and Response Services Module Topic Level Services AWS Security Hub 2.1.1 Security Hub - Overview 100 Security Hub 2.1.2 Security Hub - Dashboard 100 Security Hub 2.1.3 Security Hub - Findings 100 Security Hub 2.1.4 Security Hub - Pricing 100 Security Hub 2.1.5 Security Hub - Notifications 100 Security Hub Amazon GuardDuty 2.2.1 GuardDuty - Overview 100 GuardDuty 2.2.2 GuardDuty - Findings 100 GuardDuty 2.2.3 GuardDuty - Protection plans 100 GuardDuty 2.2.4 GuardDuty - Building your own threat list 100 GuardDuty 2.2.5 GuardDuty - Suppressing findings 100 GuardDuty 2.2.6 GuardDuty - Pricing 100 GuardDuty 2.2.7 GuardDuty - Simple notifications 100 GuardDuty 2.2.8 GuardDuty - Retaining findings 100 GuardDuty Amazon Inspector 2.3.1 Inspector - Overview 100 Inspector 2.3.2 Inspector - Dashboard 100 Inspector 2.3.3 Inspector - Findings 100 Inspector 2.3.4 Inspector - Vulnerability database search 100 Inspector 2.3.5 Inspector - Suppressing findings 100 Inspector 2.3.6 Inspector - Pricing 100 Inspector Amazon Detective 2.4.1 Detective - Overview 100 Detective 2.4.2 Detective - Summary 100 Detective 2.4.3 Detective - Search 100 Detective 2.4.4 Detective - Investigations 100 Detective 2.4.5 Detective - Finding Groups 100 Detective 2.4.6 Detective - Pricing 100 Detective 2.4.7 Detective - EKS Audit Logs 100 Detective Integrating AWS Services and Partner Solutions Module Topic Level Services 3.1 Centralizing findings from AWS security services 100 Security Hub, GuardDuty 3.2 Aggregating findings from multiple AWS accounts 100 \u0026ndash; 3.3 Centralizing findings from AWS partner solutions 100 Security Hub 3.4 Cross-region finding aggregation 200 Security Hub 3.5 Building your own Security Hub integration 100 Security Hub Managing and Prioritizing Security Findings Module Topic Level 4.1 Prioritizing findings at scale with automations 100 4.2 Suppressing findings at scale with automations 100 4.3 Using insights for prioritization and metrics 200 Automating Notifications and Response Module Topic Level Services 5.1 Setting up notifications 200 Security Hub 5.2 Set up a weekly vulnerability summary email 300 Security Hub, Inspector 5.3 Automated Security Response on AWS 200 Security Hub 5.4 Building your own automated response 300 Security Hub, GuardDuty 5.5 Enriching security findings with investigative data 400 Security Hub, GuardDuty, Detective Security Simulations and Scenarios Module Topic Level Services 6.1 Respond to IAM Role credential exfiltration 300 GuardDuty 6.2 Respond to a compromised S3 Bucket 300 GuardDuty 6.3 Respond to compromised IAM credentials 300 GuardDuty, Detective 6.4 Respond to a Lambda function calling malicious IP 300 GuardDuty 6.5 Respond to Malware on Amazon Elastic Block Store 200 GuardDuty 6.6 Respond to a compromised EC2 instance 200 GuardDuty, Detective Software Vulnerability Management Module Topic Level Services 7.1 Patching EC2 with Patch Manager 300 Inspector, Systems Manager 7.2 Vulnerability management for serverless applications 300 Inspector 7.3 Integrating Amazon Inspector into a CI/CD pipeline 300 Inspector "
},
{
	"uri": "//localhost:1313/3/3.2/",
	"title": "Aggregating findings from multiple AWS accounts",
	"tags": [],
	"description": "",
	"content": "When you use both Security Hub and AWS Organizations together, you can automatically enable Security Hub for all of your accounts, including new accounts as they are added. This increases the coverage for Security Hub checks and findings, which provides a more comprehensive and accurate picture of your overall security posture. By using the delegated administrator feature of Security Hub along with central configuration, you achieve a centralized view of your security on AWS across AWS services and partner services, across accounts, and across regions.\nNote to readers: Although the workshop says \u0026ldquo;At this time, we are unable to demonstrate multi-account aggregation in this workshop\u0026rdquo;. However, in the Automated Security Response on AWS section, the architecture diagram shows that the Cloudformation stacks have been deployed in multiple AWS accounts.\n"
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.2-amazon-guardduty/",
	"title": "Amazon GuardDuty",
	"tags": [],
	"description": "",
	"content": "Content GuardDuty - Overview GuardDuty - Findings GuardDuty - Protection plans GuardDuty - Building your own threat list GuardDuty - Suppressing findings Security Hub - Pricing GuardDuty - Notifications GuardDuty - Retaining findings "
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.4-amazon-detective/2.4.2-detective-summary/",
	"title": "Detective - Summary",
	"tags": [],
	"description": "",
	"content": "Use the Summary page in Amazon Detective to identify entities to investigate the origin of activity during the previous 24 hours. The Amazon Detective Summary page helps you to identify entities that are associated with specific types of unusual activity. It is one of several possible starting points for an investigation.\nTo display the Summary page, in the Detective navigation pane, choose Summary. The Summary page is also displayed by default when you first open the Detective console.\nFrom the Summary page, you can identify entities that meet the following criteria:\nInvestigations that show potential security events identified by Detective. Entities involved in activity that occurred in newly observed geolocations Entities that made the largest number of API calls EC2 instances that had the largest volume of traffic Container clusters that had the largest number of containers From each Summary page panel, you can pivot to the profile for a selected entity.\nAs you review the Summary page, you can adjust the Scope time to view the activity for any 24-hour time frame in the previous 365 days. When you change the Start date and time, the End date and time is automatically updated to 24 hours after your chosen start time.\nWith Detective, you can access up to a year of historical event data. This data is available through a set of visualizations that show changes in the type and volume of activity over a selected time window. Detective links these changes to GuardDuty findings.\n"
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.2-amazon-guardduty/2.2.2-guardduty-findings/",
	"title": "GuardDuty - Findings",
	"tags": [],
	"description": "",
	"content": "A GuardDuty finding represents a potential security issue detected within your network. GuardDuty generates a finding whenever it detects unexpected and potentially malicious activity in your AWS environment. You can view and manage your GuardDuty findings on the Findings page in the GuardDuty console or by using the GuardDuty CLI or API operations.\nReview a GuarDuty finding Navigate to Findings in Amazon GuardDuty by clicking Findings in the left hand navigation. Here is findings in the AWS Workshop account: Select one of the findings on the page by clicking on the row. This will open the finding summary on the right side of the page. Finding details vary based on finding type. Check another finding in the workshop: Review the finding that you opened. Understanding GuardDuty finding severity Find the Severity of the finding you selected. If you want to view or download the finding in JSON form, you can click the Finding ID at the top of the finding summary. Click the X in the top right of the finding summary to close it. Searching and Filtering GuardDuty Findings Click on the Search bar where it says Add filter criteria.\nType Severity in the search bar and click on Severity, which then opens to a sub-menu with Low, Medium, and High options.\nCheck the box for High and click Apply. This will then update the list of displayed findings accordingly. Managing GuardDuty findings With a finding selected, click the Actions dropdown (top right of the page). Click \u0026ldquo;Archive\u0026rdquo; to archive the finding. Archiving the finding will hide it from the list of Current findings. To view it, click the \u0026ldquo;Current\u0026rdquo; dropdown, and select \u0026ldquo;Archived\u0026rdquo; to see the finding you just archived. Result: To unarchive the finding, select it, and then click the Actions dropdown again (top right of the page). This time, click \u0026ldquo;Unarchive\u0026rdquo; to unarchive the finding. "
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.3-amazon-inspector/2.3.2-inspector-dashboard/",
	"title": "Inspector - Dashboard",
	"tags": [],
	"description": "",
	"content": "Check out the Inspector dashboard Navigate to the Inspector Dashboard. https://us-east-1.console.aws.amazon.com/inspector/v2/home?region=us-east-1#/dashboard\nAt the top of the page you can see the Environment coverage. Notice that only a percentage of Instances are covered. You can optionally click on the percentage to dive deeper into which of your instances are being scanned.\nOn the Dashboard, check out Risk Based Remediations near the top of the page. The risk-based remediations section shows the top five software packages with critical vulnerabilities that impact the most resources in your environment. Remediating these packages can significantly reduce the number of critical risks to your environment. Choose the software package name to see associated vulnerability details and impacted resources. On the Dashboard, you can also review:\nAmazon ECR repositories with most critical findings Amazon ECR container images with most critical findings Amazon EC2 Instances with most critical findings Amazon Machine Images (AMI) with most critical findings AWS Lambda functions with the most critical findings Code detectors for Lambda code scanning Take a look at some findings. Pick one finding for more detail Some more information You can click the techniques for more information "
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/",
	"title": "Introduction to threat detection and response services ",
	"tags": [],
	"description": "",
	"content": "Content 2.1 AWS Security Hub 2.2 Amazon GuardDuty 2.3 Amazon Inspector 2.4 Amazon Detective\n"
},
{
	"uri": "//localhost:1313/6/6.2/",
	"title": "Respond to a compromised S3 Bucket",
	"tags": [],
	"description": "",
	"content": "\rScenario / Problem Statement: You have been assigned a GuardDuty finding to investigate and remediate. The GuardDuty finding type is \u0026ldquo;Stealth:S3/ServerAccessLoggingDisabled\u0026rdquo;.\nNavigate to the GuardDuty console and open the Findings page. You should see findings with types that start with Stealth:S3 and Policy:S3. If you do not see those findings, try refreshing the page. Click on the Stealth:S3/ServerAccessLoggingDisabled finding to view the full details. You can see the finding details include information about what happened, what AWS resources were involved in the suspicious activity, when this activity took place, and other additional information. Under Resource Affected, find which S3 bucket is associated with this finding, which IAM User (User Name) made the change, and the Access key ID used. This finding informs you that S3 server access logging is disabled for the bucket. If disabled, no logs are created for any actions taken on the S3 bucket or on the objects in the bucket, unless S3 object level logging is enabled. Even though this is a low severity finding, it is important to investigate why someone disabled logging. Disabling logging could be used to cover up changes that should not be been made. To learn more, see S3 Server Access Logging.\nInvestigate another S3 policy finding. Click on the finding Policy:S3/BucketBlockPublicAccessDisabled. This finding is generated when block public access settings are disabled, if they were previously enabled. This may have been an intended change or could have been an accidental or malicious change to the bucket setting. In such a situation it is always good to confirm with the bucket owner if this was intentional. Given the context of what the bucket is used for, this seems suspicious. To determine the actions that the IAM User took, click on each of the findings. Find the API calls that were made by looking under Action and then API. Are these management events or data plane events? GuardDuty is able to analyze large volumes of data and identify potential threats in your environment. It is still important to correlate other data to understand the full scope of the potential threat. In this case you would use the details in this finding to pinpoint historical user activity in AWS CloudTrail. You could further investigate and analyze the root cause of this security finding with Amazon Detective.\nThese IAM findings are being generated by the “malicious EC2” instance making API calls. GuardDuty generates findings for these API calls that disable S3 logging and S3 block public access settings. Manually remediate the S3 bucket You confirmed with the bucket owner that the changes need to be reverted back. Proceed to remediate the S3 findings.\nNavigate to the AWS S3 Console.\nClick the name of the S3 bucket that starts with \u0026ldquo;guardduty-example-finance\u0026rdquo;.\nClick on the Properties tab, scroll down to Server access logging, click Edit, and select Enable.\nAfter selecting Enable, a prompt to identify a \u0026ldquo;Target bucket\u0026rdquo; will appear. Click Browse S3 and select the bucket name starting with guardduty-example-log. Click Choose path.\nFinally, click Save changes. You have enabled server access logging!\nTo revert the bucket back to being private, click on the Permissions tab, and click the Edit button under the Block public access (bucket setting).\nSelect the Block all public access option, click Save changes, and type \u0026ldquo;confirm\u0026rdquo; in the dialogue box that appears. Click Confirm. The bucket is private again! Another option for customers to protect against unintentional bucket exposures is to add service control policies (SCP). An SCP defines a guardrail, or sets limits, on the actions that the account\u0026rsquo;s administrator can delegate to the IAM users and roles in the accounts.\nDisable the access keys identified in the incident While the security team is analyzing the previous activity of this user to better understand the scope of the issue, you need to disable the access key associated with the user to prevent further unauthorized/unintended actions.\nNavigate to the AWS IAM console .\nClick Users in the left navigation.\nSelect the GD-Workshop-Compromised2-Simulated user.\nClick the Security Credentials tab.\nScroll down to Access keys, click the Actions dropdown, and select Deactivate. In the confirmation popup, click Deactivate. If you get an error making the key inactive, you can remove the access key.\nAutomating Remediation In step 7, you manually remediated part of the issue by re-enabling S3 server access logging. You also have the option of doing this with automation. One approach is to use AWS Config Managed Rules. AWS Config provides AWS managed rules, which are predefined, customizable rules that AWS Config uses to evaluate whether your AWS resources comply with common best practices. You can customize the behavior of a managed rule to suit your needs. AWS Config allows you to remediate noncompliant resources that are evaluated by AWS Config Rules. In this case, you can use the managed rule \u0026ldquo;s3-bucket-logging-enabled\u0026rdquo; and configure the rule to automatically enable logging for your S3 buckets.\n"
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.1-aws-security-hub/2.1.2-security-hub-dashboard/",
	"title": "Security Hub - Dashboard",
	"tags": [],
	"description": "",
	"content": "Security Hub summary Navigate to the Summary page in Security Hub. AWS Security Hub summary page At the top of the page, review the Security standards widget. This displays your most recent summary security score and the security score for each Security Hub standard. Security scores, which range from 0–100 percent, represent the proportion of passed controls relative to all of your enabled controls. Take a few minutes to review the insights generated on the Summary page. Can you see which resources in your account are failing the most security checks? One of the widgets provides a summary of the resources that have generated the most findings, broken down by the resource types. Scroll down to the graphs under Most common threat type and Software vulnerabilities with exploits. Review the threats and vulnerabilities aggregated in your account. Watch details about findings from AWS GuardDuty. Select one of them for more detail: "
},
{
	"uri": "//localhost:1313/5/5.2/",
	"title": "Set up a weekly vulnerability summary email",
	"tags": [],
	"description": "",
	"content": "\rScenario / Problem Statement: You have been tasked with setting up a weekly summary email to highlight key insights based on the data you are aggregating in Security Hub. As a starting point, the email needs to highlight your current security store, the vulnerabilities impacting the most instances and images, and the highest priority findings.\nNote to Participants: You must complete the module named \u0026ldquo;Using insights for prioritization and metrics\u0026rdquo; before starting this module.\nIn this scenario, you\u0026rsquo;ll write a Lambda function to call the Security Hub and Amazon Inspector APIs to fetch the details we need. you\u0026rsquo;ll use EventBridge to call the Lambda weekly, and you will subscribe to the email by using AWS Simple Notification Service.\nAmazon Inspector is an automated vulnerability management service that continually scans AWS workloads for software vulnerabilities and unintended network exposure. Vulnerability findings from Inspector are included in the summary email to provide a more comprehensive view of vulnerabilities that may exist in the account that the summary email is being produced for.\nConfigure Amazon Simple Notification Service topic Navigate to Amazon SNS\nClick Topics in the left navigation.\nClick Create topic.\nSelect Standard type.\nFor the name, enter weekly-vulnerability-email. Leave everything else as is and click Create topic at the bottom of the page. This will create the topic.\nMake a note of the SNS Topic ARN. You will need this later. The ARN looks like \u0026ldquo;arn:aws:sns:us-******:############:weekly-vulnerability-email\u0026rdquo;.\nSubscribe to the topic From the weekly-vulnerability-email topic page, click Create subscription.\nOn the Create subscription page, under Protocol, select email.\nOn the Create subscription page, under Endpoint, enter your email address that you want to use for this workshop to receive notifications. You can unsubscribe at the end of the workshop.\nClick Create subscription.\nWithin a couple minutes, you will receive an email at the email address you entered. Confirm the subscription by clicking \u0026ldquo;Confirm subscription\u0026rdquo; in the email.\nCreate the Lambda function to author the email Go to https://console.aws.amazon.com/lambda/home?#/create/function?intent=authorFromScratch On the Create function page, set the Function name to weekly-vulnerability-email and pick Node.js 20.x for the Runtime.\nClick Create function. Copy and paste the following code into the editor labeled Code source (removing the existing code).\n\u0026#39;use strict\u0026#39;;\rimport {\rSecurityHubClient,\rGetInsightsCommand,\rGetInsightResultsCommand\r} from \u0026#34;@aws-sdk/client-securityhub\u0026#34;;\rimport {\rInspector2Client,\rListFindingAggregationsCommand\r} from \u0026#34;@aws-sdk/client-inspector2\u0026#34;;\rimport {\rSNSClient,\rPublishCommand\r} from \u0026#34;@aws-sdk/client-sns\u0026#34;;\rconst securityhubClient = new SecurityHubClient();\rconst inspectorClient = new Inspector2Client();\rconst snsClient = new SNSClient();\rexport const handler = async (event, context) =\u0026gt; {\rtry {\rlet msg = \u0026#39;\u0026#39;;\rconst getInsights = new GetInsightsCommand({});\rconst allCustomInsights = await securityhubClient.send(getInsights);\rconst insightsToFetch = [\r...allCustomInsights.Insights, // include all custom insights\r...[\r{\rName: \u0026#34;Top products by counts of findings\u0026#34;,\rInsightArn: \u0026#34;arn:aws:securityhub:::insight/securityhub/default/28\u0026#34;\r}, // include default insight 28\r{\rName: \u0026#34;Severity by counts of findings\u0026#34;,\rInsightArn: \u0026#34;arn:aws:securityhub:::insight/securityhub/default/29\u0026#34;\r} // include default insight 29\r]\r];\rconst insightsToFetchResults = await Promise.all(insightsToFetch.map(async (o, i) =\u0026gt; {\rlet getInsightResults = new GetInsightResultsCommand({InsightArn: o.InsightArn});\rlet insightResults = await securityhubClient.send(getInsightResults);\rreturn {...insightResults, Name: o.Name};\r}));\rconst results = insightsToFetchResults.forEach((o,i) =\u0026gt; {\rmsg += `------------------------------------\\nInsight: ${o.Name}\\n------------------------------------\\n`;\ro.InsightResults.ResultValues.slice(0,9).forEach((o,i) =\u0026gt; {\rmsg += `${o.GroupByAttributeValue}: ${o.Count}\\n`;\r}); msg += `\\nFollow the link below to see all ${o.InsightResults.ResultValues.length} results from this insight in Security Hub:\\n`;\rmsg += `https://us-east-1.console.aws.amazon.com/securityhub/home?region=us-east-1#/insights/${o.InsightResults.InsightArn}\\n\\n`;\r});\rconst listFindingAggregationsInput = {\r\u0026#34;aggregationType\u0026#34;: \u0026#34;PACKAGE\u0026#34;,\r\u0026#34;maxResults\u0026#34;: 5,\r\u0026#34;aggregationRequest\u0026#34;: {\r\u0026#34;packageAggregation\u0026#34;: {\r\u0026#34;sortOrder\u0026#34;: \u0026#34;DESC\u0026#34;,\r\u0026#34;sortBy\u0026#34;: \u0026#34;CRITICAL\u0026#34;\r}\r}\r};\rconst listFindingAggregations = new ListFindingAggregationsCommand(listFindingAggregationsInput);\rconst inspectorFindingAggregations = await inspectorClient.send(listFindingAggregations);\rmsg += \u0026#39;\\n------------------------------------\\nSoftware vulnerabilities impacting the most instances and images:\\n------------------------------------\\n\u0026#39;;\rinspectorFindingAggregations.responses.forEach(pkg =\u0026gt; {\rmsg += `Package: ${pkg.packageAggregation.packageName}:\\nCounts of findings by severity:\\n`;\rmsg += `Critical: ${pkg.packageAggregation.severityCounts.critical}, `;\rmsg += `High: ${pkg.packageAggregation.severityCounts.high}, `;\rmsg += `Medium: ${pkg.packageAggregation.severityCounts.medium} \\n\\n`;\r});\rconst emailTopicArn = process.env[\u0026#39;emailTopicArn\u0026#39;];\rconst messageInput = {\rTopicArn: emailTopicArn,\rMessage: msg,\rSubject: \u0026#34;Weekly Vulnerability Report\u0026#34;,\r};\rconst publish = new PublishCommand(messageInput);\rconst publishResponse = await snsClient.send(publish);\rreturn `Successfully sent message id ${publishResponse.MessageId}`;\r} catch (error) {\rconsole.error(\u0026#39;Error:\u0026#39;, error);\rthrow error;\r}\r} Then from the Code source menu, click File then Save. Then click the Deploy button.\nNotice on line 76 of the Lambda code we reference an environment variable where we store the ARN of the SNS Topic. We need to configure that. Directly above the Code source section, click the Configuration tab. Then click Environment Variables from the left navigation appears.\nClick Edit under Environment Variables. Then click Add environment variable.\nInput \u0026ldquo;emailTopicArn\u0026rdquo; under Key. Input the ARN of the SNS Topic that you created in step 6 as the Value. Make sure there are no spaces.\n20.Click Save.\nSet the permissions of the Lambda function Now we need to configure the permissions of our Lambda function so it can run the commands required to send our email. Under the same Configuration tab, click Permissions from the left navigation. We need to modify the execution role for this Lambda function.\nClick the Role name. It should start with \u0026ldquo;weekly-vulnerability-email-role-\u0026rdquo;. This will take you to the role in the Identity and Access Management (IAM) console.\nFrom the Role page, click the Add permissions button and select Create inline policy.\nOn the Create policy page, click the JSON tab. Then replace the existing policy with the following policy. This policy gives the lambda function permissions to retrieve information about Security Hub insights, retrieve vulnerability findings from Inspector, and the ability to send messages to SNS. For this workshop, we will simply allow our Lambda function to publish to any SNS topic, but in any other environment, it is best practice to limit this to specific ARNs.\n{\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: [\r\u0026#34;securityhub:GetInsightResults\u0026#34;,\r\u0026#34;securityhub:GetInsightFindingTrend\u0026#34;,\r\u0026#34;inspector2:ListFindingAggregations\u0026#34;,\r\u0026#34;sns:Publish\u0026#34;,\r\u0026#34;securityhub:GetInsights\u0026#34;\r],\r\u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;\r}\r]\r} Click the Next button.\nGive your policy the name AllowSNSPublishAndInspectorList and click Create policy.\nSet timeout of the Lambda function Now we need to configure the timeout of our Lambda function so it has time to run all the commands required to send our email. Under the same Configuration tab, click General Configuration from the left navigation.\nClick Edit.\nSet the Timeout to 1 min 0 sec.\nClick Save.\nTest the vulnerability summary email We are ready to test our vulnerability summary email! Return to the Lambda console and open the function you created.\nNext to the Code source section, click the Test dropdown and select Configure test event. This should pop open a Configure test event window.\nUnder Event name, input \u0026ldquo;Generate-Email\u0026rdquo;. Then click Save. We don\u0026rsquo;t need to worry about the Event JSON since we don\u0026rsquo;t use that in our function. You should see a banner appear stating \u0026ldquo;The test event Generate-Email was successfully saved.\u0026rdquo;\nClick Test again to run the test using your configuration. You\u0026rsquo;ll see the Execution results under the Code Source section. Within a couple minutes you should receive an email with your vulnerability summary!\nNote to Participants: If you do not receive an email, check the execution results for an error. Make sure the ARN of the SNS Topic that you configured an environment variable for ends in \u0026ldquo;weekly-vulnerability-email\u0026rdquo;. If there are any characters after \u0026ldquo;email\u0026rdquo;, remove them and save the environment variable. Then test again.\nSchedule the weekly vulnerability summary email with EventBridge Finally, we need to create an EventBridge rule that will call the Lambda function we made on a weekly basis. Open EventBridge. https://us-east-1.console.aws.amazon.com/events/home\nSelect EventBridge Schedule on the right. Click Create schedule.\nOn the Specify schedule detail page, name your rule weekly-vulnerability-email.\nUnder Schedule pattern select \u0026ldquo;Recurring schedule\u0026rdquo;\nLeave \u0026ldquo;Cron-based schedule\u0026rdquo; selected.\nWe\u0026rsquo;ll schedule the email every Monday at 7am CDT. Under the Cron expression, set cron( 0 12 ? * 2 * ). Select Local time zone from the drop down. You should see a preview of the Next 10 trigger date(s).\nUnder \u0026ldquo;Flexible time window\u0026rdquo;, select \u0026ldquo;Off\u0026rdquo;. Then click Next.\nOn the Select target step, pick AWS Lambda - Invoke. Then select \u0026ldquo;weekly-vulnerability-email\u0026rdquo; from the Lambda function dropdown below. Click Next.\nOn the Settings step, click Next.\nOn the Review and create schedule step, click Create schedule.\n"
},
{
	"uri": "//localhost:1313/4/4.2/",
	"title": "Suppressing findings at scale with automations",
	"tags": [],
	"description": "",
	"content": "\rScenario / Problem Statement: After centralizing all your security alerts and starting prioritization of findings and controls to focus on first, your team has decided that there are too many findings. In an effort to reduce noise, you have been tasked with temporarilly setting up suppression rules for findings that are too low of a priority to be focused on at this time.\nAutomate finding suppression to reduce noise Finally, we\u0026rsquo;ll create a rule for suppressing findings. When you are using Security Hub, especially if you have a large environment or use many of the integrations available in Security Hub, you may find it necessary to reduce the volume of findings through suppression. This is only recommended if it helps you focus on the findings that are most important. If you find it necessary to use a suppression rule, you should only suppress low priority findings, and you should make this a temporary measure and revise the suppression rule after you have made progress improving your security posture and reducing the number of findings.\nReturn to the Automations page in Security Hub.\nClick Create rule.\nSelect Create custom rule.\nChange the Rule name to \u0026ldquo;Suppress low severity Inspector findings\u0026rdquo;.\nCopy the rule name into the Rule description or type your own description.\nFor the first Criteria, select ProductName for Key. Select EQUALS for Operator. Input \u0026ldquo;Inspector\u0026rdquo; for Value.\nClick Add criteria.\nFor the second Criteria, select SeverityLabel for Key. Select EQUALS for Operator. Select INFORMATIONAL for Value.\nClick Add another value under the criteria you just added. Again, select EQUALS for Operator. Select LOW for Value. Now the rule will apply to findings from Inspector with the severity label, INFORMATIONAL or LOW.\nClick Refresh to preview the matching findings. Below Automated action, select SUPPRESSED for Workflow status.\nScroll down to the Note, and input \u0026ldquo;Automatically suppressed via automation.\u0026rdquo; Leave the other default settings and click Create rule. If you plan to suppress findings, you should revisit suppression rules on a schedule to ensure they are still necessary and acceptable to your organization. If you need to you can edit or delete automation rules.\nTry deleting a rule. From the Automations page, check the box next to the rule named \u0026ldquo;Suppress low severity Inspector findings\u0026rdquo;.\nClick the Action dropdown, and select Delete.\nWhen the confirmation box appears, click Delete again. "
},
{
	"uri": "//localhost:1313/7/7.2/",
	"title": "Vulnerability management for serverless applications",
	"tags": [],
	"description": "",
	"content": "\rScenario / Problem Statement: Your team is partnering with an application development team to create a new secure application using AWS Serverless Application Model. Your job is to use Amazon Inspector to detect and remediate vulnerabilities in the application as they are uncovered.\nYou will deploy serverless application with AWS Serverless Application Model. The AWS Serverless Application Model (SAM) is an open-source framework for building serverless applications. It provides shorthand syntax to express functions, APIs, databases, and event source mappings.\nYou\u0026rsquo;ll start by using AWS Cloud9 to clone the application from AWS CodeCommit. AWS Cloud9 is a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser. It includes a code editor, debugger, and terminal. Cloud9 comes pre-packaged with essential tools for popular programming languages and the AWS Command Line Interface (CLI) pre-installed so you don’t need to install files or configure your laptop for this workshop.\nAt the time this workshop is summarized, Cloud9 and CodeCommit are no longer supported. So this section is just for reference.\nSetup Cloud9 and deploy your serverless application Navigate to AWS Cloud9, https://us-east-1.console.aws.amazon.com/cloud9control/home?region=us-east-1\nClick on Create Environment.\nEnter \u0026ldquo;serverless-appsec\u0026rdquo; in the Name field and leave everything else set the default options.\nClick Create at the bottom of the screen.\nWait to see a banner message indicating \u0026ldquo;Successfully created serverless-appsec\u0026hellip;\u0026rdquo;.\nClick on the link shown in table to Open the Cloud9 IDE.\nYou will see a terminal at the bottom of IDE. You may want to expand it to have more working space. You will run CLI commands in this Terminal during the workshop. Keep Cloud9 IDE open in the browser.\nVerify that your user is logged in by running the following command in Cloud9 terminal at the bottom of the page. aws sts get-caller-identity\nYou should receive a response that includes your Account, UserId, and Arn.\nWe already have an application in AWS CodeCommit. Optionally, you may want to take a minute and check it out. https://us-east-1.console.aws.amazon.com/codesuite/codecommit/repositories/appsec-serverless-demoapp/browse?region=us-east-1\nLet\u0026rsquo;s clone the existing application to our Cloud9 environment. Run the following command in the terminal window in Cloud9. git clone https://git-codecommit.us-east-1.amazonaws.com/v1/repos/appsec-serverless-demoapp\nNavigate into the application directory by running the below command. cd appsec-serverless-demoapp\nThe sample application is built using AWS SAM. While in the application root directory, use the following command to build the application and wait for it to complete. sam build --use-container\nNext, use the deploy command with guided option to specify deployment configuration. It will prompt you several times, as documented in the following instructions. sam deploy --guided\nWhen you build, the AWS SAM CLI creates a .aws-sam directory and organizes your function dependencies, project code, and project files there.\nFor the prompt Stack Name [appsec-serverless-demoapp2]: press enter.\nFor the prompt AWS Region [us-east-1]: press enter.\nFor the prompt Confirm changes before deploy [Y/n]: type \u0026ldquo;Y\u0026rdquo; and press enter.\nFor the prompt Allow SAM CLI IAM role creation [Y/n]: type \u0026ldquo;Y\u0026rdquo; and press enter.\nFor the prompt Disable rollback [y/N]: type \u0026ldquo;N\u0026rdquo; and press enter.\nFor the prompt HelloWorldFunction has no authentication. Is this okay? [y/N]: type \u0026ldquo;y\u0026rdquo; and press enter.\nFor the prompt LoggingFunction has no authentication. Is this okay? [y/N]: type \u0026ldquo;y\u0026rdquo; and press enter..\nFor the prompt Save arguments to configuration file [Y/n]: type \u0026ldquo;Y\u0026rdquo; and press enter.\nFor the prompt SAM configuration file [samconfig.toml]: press enter.\nFor the prompt SAM configuration environment [default]: press enter.\nFor the prompt Deploy this changeset? [y/N]: type \u0026ldquo;y\u0026rdquo; and press enter.\nIt will take about 2 minutes to create the stack. It may take several minutes for Amazon Inspector to detect the new functions and generate findings.\nCan double check from CloudFormationStacks:\nReview findings in Amazon Inspector Open Amazon Inspector in a new tab. https://us-east-1.console.aws.amazon.com/inspector/v2/home?region=us-east-1\nFrom the navigation panel, open the By Lambda function page under Findings.\nHere you should see several Lambda functions with vulnerabilities flagged. Click the name of the function that starts with appsec-serverless-demoapp2-LoggingFunction- to view the Lambda function details. If you don\u0026rsquo;t see it yet, you may need to keep waiting and refresh the page. Its findings: Notice there is a finding titled \u0026ldquo;CWE-117,93 - Log injection\u0026rdquo;. Click the title of the finding to expand the finding details. Here you can see important information, including a description and severity. The vulnerability report also includes the file path, vulnerability location, and suggested remediation, including suggested code change. Note the change you need to make. Remediate code vulnerability Return to Cloud9 IDE.\nFind the file directory in the navigation on the left. Open the app.py file located in the \u0026ldquo;logging_sample\u0026rdquo; directory.\nFollowing the recommended remediation from Inspector. Replace the following line of code: logger.info(\u0026quot;Processing %s\u0026quot;, filename)\nwith this line of code: logger.info(\u0026quot;Processing %s\u0026quot;, urllib.parse.quote(filename))\nIf you get an error, it may be because the recommendation requires a new import. If you get an error, make sure to check your imports and spacing. Make the necessary changes. Your code should look something like:\nSave the file, then rebuild the sam application using following command. sam build --use-container\nOnce build is completed, deploy the application with the following command and wait for the deployment to complete. sam deploy --guided\nUse the same responses for the guided deployment that you gave on steps 15-24.\nFor the prompt Deploy this changeset? [y/N]: type \u0026ldquo;y\u0026rdquo; and press enter.\nVerify the remediation. Return to the By Lambda function page in Amazon Inspector. https://us-east-1.console.aws.amazon.com/inspector/v2/home?region=us-east-1#/findings/lambda/\nAgain, click the name of the function that starts with appsec-serverless-demoapp2-LoggingFunction- to view the Lambda function details.\nSet Finding status next to the Filter criteria to \u0026ldquo;Show all\u0026rdquo;.\nThe finding titled \u0026ldquo;CWE-117,93 - Log injection\u0026rdquo; should now have a status of Closed. If it does not, wait a couple minutes. Inspector will automatically detect the change and update the finding accordingly.\n"
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.3-amazon-inspector/",
	"title": "Amazon Inspector",
	"tags": [],
	"description": "",
	"content": "Content Inspector - Overview Inspector - Dashboard Inspector - Findings Inspector - Vulnerability database search Inspector - Suppressing findings Inspector Pricing "
},
{
	"uri": "//localhost:1313/5/5.3/",
	"title": "Automated Security Response on AWS",
	"tags": [],
	"description": "",
	"content": "\rScenario / Problem Statement: At the scale of your company, you have realized that there are thousands of misconfigured resources. You need to find a solution to centrally remediating miconfiguations automatically, at scale.\nIn this workshop, only one account is used so this solution does not show all its features. For the whole scenario of this solution, please review my own deploytment at this GitHub repo.\nDeploy Automated Security Response on AWS via CloudFormation The ASR solution requires deployment of 3 CloudFormation templates. You can view templates here. You may launch all of the stacks at the same time. You do not need to wait for one stack to complete before starting the next. The 3 stacks take 10 minutes to complete. The stacks will also launch multiple nested stacks to create all the necessary resources.\nDeploy the admin stack by clicking the Deploy Automated Security Response admin stack admin stack button below. Make sure you are launching the template in the region you have been working in. To launch this solution in a different AWS Region, use the Region selector in the AWS Management Console navigation bar. Deploy Automated Security Response admin stack admin stack\nReview the stack name and the parameters for the template. The parameters are pre-populated, but confirm that the parameters selected match the screenshot below. Scroll to the bottom of the Quick create stack screen and check the box for I acknowledge that AWS CloudFormation might create IAM resources and the box for I acknowledge that AWS CloudFormation might require the following capability: CAPABILITY_AUTO_EXPAND.\n3. Click Create stack. You may continue without waiting for the stack to complete.\nDeploy the member roles stack by clicking the Deploy ASR member roles stack button below. Make sure you are launching the template in the region you have been working in. To launch this solution in a different AWS Region, use the Region selector in the AWS Management Console navigation bar. Deploy ASR member roles stack\nReview the stack name and the parameters for the template. For the SecHubAdminAccount parameter enter the account ID you see in the top right of the AWS Console.\nScroll to the bottom of the Quick create stack screen and check the box for I acknowledge that AWS CloudFormation might create IAM resources.\nClick Create stack.\nDeploy the member runbooks stack by clicking the Deploy ASR member runbooks stack button below. Make sure you are launching the template in the region you have been working in. To launch this solution in a different AWS Region, use the Region selector in the AWS Management Console navigation bar. Deploy ASR member runbooks stack: Deploy ASR member runbooks stack.\nReview the stack name and the parameters for the template. The parameters are pre-populated, but confirm that the parameters selected match the screenshot below. For the SecHubAdminAccount parameter enter the account ID you see in the top right of the AWS Console again. Scroll to the bottom of the Quick create stack screen and check the box for I acknowledge that AWS CloudFormation might create IAM resources and the box for I acknowledge that AWS CloudFormation might require the following capability: CAPABILITY_AUTO_EXPAND.\nClick Create stack.\nAt this point, you must wait for all of the CloudFormation stacks to complete deploying. You may check progress here: https://console.aws.amazon.com/cloudformation/home?#/stacks Leverage Automated Security Response on AWS for remediation This solution includes the playbook remediations for the security standards defined as part of the Center for Internet Security (CIS) AWS Foundations Benchmark v1.2.0, Center for Internet Security (CIS) AWS Foundations Benchmark v1.4.0, AWS Foundation Security Best Practices (AFSBP) v.1.0.0, Payment Card Industry Data Security Standard (PCI-DSS) v3.2.1, and Security Control (SC) v2.0.0. You can learn more here: https://docs.aws.amazon.com/solutions/latest/automated-security-response-on-aws/playbooks-1.html\nLet\u0026rsquo;s try out the solution. Return to Security Hub.\nOpen the Controls page.\nFilter for the control EC2.2. Click the name The VPC default security group should not allow inbound and outbound traffic. Select the checkbox to select all failed checks.\nClick the Actions drop down and select Remediate with ASR. Choosing this action sends a copy of the finding(s) to EventBridge, kicking off the automation to change the default security group rules setting to restrict inbound and outbound traffic.\nAfter a few minutes the checks should have a status of RESOLVED.\nIt may take about 3 to 5 minutes to run and update. After that, wait and refresh the page again.\nDeep dive to the solution Terminology AWS Config rule: an ideal config setting Security control: a representation of a rule -\u0026gt; in one or more security standards Finding: a potential security issue generated after security check Playbook: a set of remediation. Remediation runbook: An implementation of a set of steps that resolves a finding. Control runbook: SSM automation documents that Orchestrator uses to route an initiated remediation for a specific control to the correct remediation runbook. Workflow of the architecture With AWS Config rules for supported standards compliance, AWS Config executes security controls check and generates findings if there are failed compliances, including in the administrator and member accounts (in AWS Organazation). The findings are aggregated by AWS Security Hub. The admin can automatically or manually activate the Custom Action to remediate the relatively findings. Those events are triggered in relatively EventBridge rules to the Step Function Orchestrator, which routes to the corresponding playbooks remediation (e.g: findings for EC2.13 leads to EC2.13 playbook). Amazon SQS service is used to execute multi remediations in parallel. Orchestrator will notify to subscribed users about the remediation process and result. It will invoke the corresponding control runbook, which eventually invokes the appropriate remediation runbook for the findings.\nAn example of security control In this dive-deep section, I use security control EC2.13 to check the resource configuration and remediate if non-compliant. There are other remediation examples below, but the remediation flows are same to EC2.13. Control Runbook EC2.13 First step The first step of the Control Runbook is to parse the inputs received from the finding: The yaml version of the runbook:\nexpected_control_id:\r- EC2.13\r- EC2.14\rparse_id_pattern: ^arn:(?:aws|aws-cn|aws-us-gov):ec2:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:security-group\\/(sg-[a-f\\d]{8,17})$\rFinding: \u0026#39;{{ Finding }}\u0026#39; And the expected output of this first step is: Second step In step 2, the control runbook invokes the remediation runbook (SSM automation document) named AWS-DisablePublicAccessForSecurityGroup. You can refer more in AWS Systems Manager Automation runbook reference, and check the logic flow at System Manager page - Document section.\nYaml version of this step: The remediation runbook will trigger Amazon EC2 API to remove inbound rules that meets your parameters in API call. In this automated document, it revokes any inbound rules with protocol TCP port 22 (SSH) and IP range 0.0.0.0/0: Demo Prerequisite Behind the scene: Orchestrator Scenarios Link demo: https://www.youtube.com/playlist?list=PL7IdJecfX87jHfO43NYd6MXL8mBYWBAIf 1.1. Security groups should not allow ingress from 0.0.0.0/0 to port 22 - in member 1.2. Security groups should not allow ingress from 0.0.0.0/0 to port 22 - in admin 2. Ensure IAM password policy requires at least one number 3. RDS DB clusters should be configured for multiple AZs 4. EBS default encryption should be enabled 5. S3 general purpose buckets should have block public access settings enabled "
},
{
	"uri": "//localhost:1313/3/3.3/",
	"title": "Centralizing findings from AWS partner solutions",
	"tags": [],
	"description": "",
	"content": "AWS Security Hub can aggregate security finding data from several AWS services and from supported AWS Partner Network (APN) security solutions. This aggregation provides a comprehensive view of security and compliance across your AWS environment.\nYou can also send findings that are generated from your own custom security products.\nFrom the supported AWS and partner product integrations, Security Hub receives and consolidates only findings that are generated after you enable Security Hub in your AWS accounts. The service does not retroactively receive and consolidate security findings that were generated before you enabled Security Hub.\nOne of the partner integrations available is Cloud Custodian. Cloud Custodian enables you to manage your cloud resources by filtering, tagging, and then applying actions to them. The YAML DSL allows definition of rules to enable well-managed cloud infrastructure that\u0026rsquo;s both secure and cost optimized. For more information, visit https://cloudcustodian.io/\nReceive findings from Cloud Custodian Open the Integrations page in Security Hub and search for Cloud Custodian. Click Accept Findings. Review the permissions required for the integration.\n3. Click Accept findings. This will put in place a service policy allowing the partner solution to send finding information into this account. For the purposes of this workshop a Cloud Custodian instance is already set up to automatically send findings to the integration you just enabled. To use other partner integrations in your account, you would still need to complete the Configure step in the partner solution so findings that are created by the partner solution are sent to Security Hub.\nYou can click on See findings to view new findings from Cloud Custodian. It can take 5-10 minutes for them to appear.\n"
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.4-amazon-detective/2.4.3-detective-search/",
	"title": "Detective - Search",
	"tags": [],
	"description": "",
	"content": "Detective - Search Open the Search page from Detective. https://us-east-1.console.aws.amazon.com/detective/home?region=us-east-1#search\nAs an example, try searching for the role you are currently using. For Select type, pick AWS Role. Then input \u0026ldquo;WSParticipantRole\u0026rdquo; and click Search. Click on the Principal ID to view how WSParticipantRole has been used. Take a minute to review the visualizations and tabs on this page. Note the scope time in the top right corner. Does this look like what you have been doing so far in the workshop? It should!\n"
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.2-amazon-guardduty/2.2.3-guardduty-protection-plans/",
	"title": "GuardDuty - Protection plans",
	"tags": [],
	"description": "",
	"content": "Prequisite Make sure the EC2 instance has the SSM Management Role (instance profile). For how to add instance profile to an EC2 instance, please refer more in https://docs.aws.amazon.com/systems-manager/latest/userguide/setup-instance-permissions.html#attach-instance-profile.\nAmazon S3 protection in Amazon GuardDuty Visit the S3 Protection page under Protection plans in the GuardDuty console.\nMake sure that S3 Protection is enabled. EKS Protection in Amazon GuardDuty Visit the EKS Protection page under Protection plans in the GuardDuty console.\nMake sure that EKS Audit Log Monitoring is enabled. Note: Console experience for GuardDuty EKS Runtime Monitoring is now managed as part of the new Runtime Monitoring feature. Runtime Monitoring in Amazon GuardDuty Visit the Runtime Monitoring page under Protection plans in the GuardDuty console. Make sure that Runtime Monitoring is enabled along with Automated agent configuration for each Amazon EKS, AWS Fargate (ECS only), and Amazon EC2. On the Runtime Monitoring page, switch to the tab Runtime coverage. What are the \u0026ldquo;Coverage statistics\u0026rdquo;? While out of scope for this workshop, learn more about setting up Runtime Monitoring at https://docs.aws.amazon.com/guardduty/latest/ug/runtime-monitoring.html . Note: If the EC2 Instance Coverage status is unhealthy and the Issue status is \u0026ldquo;No Agent Reporting\u0026rdquo; or something related to SSM it may be due to SSM agent can not be installed in the EC2 instance. You can clarify by check /var/log/amzn-guardduty-agent in the instance (AL2, AL2023). Further read https://docs.aws.amazon.com/guardduty/latest/ug/gdu-assess-coverage-ec2.html#ec2-runtime-monitoring-coverage-issues-troubleshoot\nMalware Protection for EC2 in Amazon GuardDuty Visit the Malware Protection page under Protection plans in the GuardDuty console. GuardDuty automatically initiates a malware scan after generating a finding indicative of malware in an EC2 instance or a container workload. Make sure that GuardDuty-initiated malware scan is enabled. Here are some EC2 malware scans If you follow a scan through Scan ID EICAR-Test file is a file to check whether the threat detection function works. It is not a real virus.\nScroll down and toggle Retain scanned snapshots when malware is detected on.\nRDS Protection in Amazon GuardDuty Visit the RDS Protection page under Protection plans in the GuardDuty console. Make sure that RDS Login Activity Monitoring is enabled. Lambda Protection in Amazon GuardDuty Visit the Lambda Protection page under Protection plans in the GuardDuty console. 14. Make sure that Lambda Network Activity Monitoring is enabled.\n"
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.3-amazon-inspector/2.3.3-inspector-findings/",
	"title": "Inspector  - Findings",
	"tags": [],
	"description": "",
	"content": "Filter findings Navigate to Findings: All Findings (https://us-east-1.console.aws.amazon.com/inspector/v2/home?region=us-east-1#/findings/all ).\nClick the input at the top of the page labeled Filter criteria that has the placeholder \u0026ldquo;Add filter\u0026rdquo;. A finding filter allows you to view only the findings that match the criteria you specify. Findings that do not match the filter criteria are excluded from your view. Take a minute to review all the options for filtering your list of findings.\nYou can create a filter on each tab to focus on specific types of findings. Try filtering on a resource tag. Click the field, Add filter. Select Resource tag. Keep in mind, filters are case sensitive. Input \u0026ldquo;Environment\u0026rdquo; for Key. Input \u0026ldquo;Development\u0026rdquo; for Value. Click Apply. This shows findings for resources with a certain tag applied.\nNow remove that filter you just added by clicking Clear filters. "
},
{
	"uri": "//localhost:1313/7/7.3/",
	"title": "Integrating Amazon Inspector into a CI/CD pipeline",
	"tags": [],
	"description": "",
	"content": "In this module, you will learn how to integrate Amazon Inspector container image scans directly into your CI/CD pipeline to scan for software vulnerabilities, and provide reports at the end of your build. This feature allows customers to investigate, and remediate, risks before deployment.\nThe Amazon Inspector CI/CD integration utilizes a combination of the Amazon Inspector SBOM Generator, and the Amazon Inspector Scan API, to produce vulnerability reports for your container images. The Amazon Inspector SBOM Generator creates a software bill of materials (SBOM) from a provided container image, then, the Amazon Inspector Scan API scans that SBOM and creates a report with details on any vulnerabilities detected.\nYou can achieve a CI/CD integration with Amazon Inspector through the Amazon Inspector plugins purposefully built for individual CI/CD solutions and available in their marketplace, or you can create your own custom scanning integration.\nUse the Jenkins plugin to integrate Amazon Inspector into your CI/CD pipeline. You will use images that are located in Docker Hub.\nInstall Jenkins on an EC2 instance In this section, you will install Jenkins and the Amazon Inspector SBOM Generator on an EC2 instance. Jenkins is an open-source automation server that integrates with a number of AWS Services, including: AWS CodeCommit, AWS CodeDeploy, Amazon EC2 Spot, and Amazon EC2 Fleet. The Amazon Inspector SBOM Generator (Sbomgen) is a binary tool that produces a software bill of materials (SBOM) for a container image. An SBOM is a collected inventory of the software installed on a system. Sbomgen works by scanning for files known to contain information about installed packages. If one of these files is found, the tool extracts package names, versions, and other metadata.\nNavigate to Amazon EC2 console and open the Instances page. https://us-east-1.console.aws.amazon.com/ec2/home?region=us-east-1#Instances:instanceState=running\nSelect the Jenkins instance, and click the Connect button at the top of the page.\nSwitch to the Session Manager tab on the Connect to instance page.\nClick Connect. This will open a Systems Manager session.\nDownload the Jenkins repo. sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo Import a key file from Jenkins to enable installation. sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key\nUpgrade any Jenkins components. sudo yum upgrade\nInstall Java. sudo yum install java-11-amazon-corretto -y\nInstall Jenkins. sudo yum install jenkins -y\nEnable the Jenkins service to start at boot. sudo systemctl enable jenkins\nStart Jenkins as a service. sudo systemctl start jenkins\nVerify the Jenkins service is running. sudo systemctl status jenkins\nClick Terminate.\nReturn to the Instances page in the EC2 console.\nSelect the Jenkins instance.\nGo to the Security tab of the instance details.\nNote the IAM Role under Security details. You will look up the full ARN of this role later in this module.\nUnder Security groups, click the security group attached to the instance. It will have a name starting with \u0026ldquo;sg-\u0026rdquo;.\nYou will be brought to the security group\u0026rsquo;s configuration. Click the Edit inbound rules button.\nYou will need to connect to the EC2 instance over port 8080 to reach the admin page of Jenkins. Click the Add rule button.\nFor the new rule, set Type to Custom TCP. Set Port range to \u0026ldquo;8080\u0026rdquo;. For Source, select My IP.\nClick Save rules.\nConfigure an IAM role for the Jenkins CI/CD integration We need to create an IAM role that allows access to the Amazon Scan API, that scans the software bill of materials, in Jenkins. Open the IAM console. https://us-east-1.console.aws.amazon.com/iam/home?region=us-east-1#/home\nFrom the navigation pane of the IAM console, open Policies.\nClick Create Policy.\nIn Policy Editor click the JSON button, and replace the policy with the following:\n{\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: \u0026#34;inspector-scan:ScanSbom\u0026#34;,\r\u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;\r}\r]\r} Click Next.\nOn the Review and create page, input \u0026ldquo;InspectorCICDscan-policy\u0026rdquo; for the Policy name. This policy will be attached to the role you’ll create in a few steps.\nClick Create policy.\nFrom the navigation pane of the IAM console, open Roles and search for the role you noted earlier (attached to the EC2 instance, Jenkins). The role should start with \u0026ldquo;cfn-InspectorLabsInfrastructure\u0026rdquo; and includes the term \u0026ldquo;SSMInstanceRole\u0026rdquo;. Click the name of the role to open the details.\nCopy the ARN of the role. You will need this in a few steps.\nFrom the navigation pane of the IAM console, open Roles and then click Create Role.\nFor Trusted entity type, select Custom trust policy.\nReplace the Custom trust policy with the following. Replace \u0026ldquo;ARN\u0026rdquo; with the ARN of the IAM role you copied a few steps previously (that includes the phrase \u0026ldquo;SSMInstanceRole\u0026rdquo;).\n{\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Principal\u0026#34;: {\r\u0026#34;AWS\u0026#34;: \u0026#34;ARN\u0026#34;\r},\r\u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRole\u0026#34;\r}\r]\r} Click Next.\nIn Add permissions search for and select the policy you created earlier, \u0026ldquo;InspectorCICDscan-policy\u0026rdquo;. Then click Next.\nGive the role the name \u0026ldquo;InspectorCICDscan-role\u0026rdquo;. Then click Create Role.\nThis IAM permission setup is used for the workshop, but may not be applicable to your own environment. In the workshop, the role attached to the EC2 instance that is hosting Jenkins, is given trust to the newly created InspectorCICDscan-role. The InspectorCICDscan-role will be used by Jenkins. Therefore, when Jenkins uses the InspectorCICDscan-role, it will assume the IAM role attached to the EC2 instance, which has permissions to the Inspector Scan service.\nConfigure Jenkins Now that the instance has the correct security group and AWS permissions, you can configure Jenkins to use Inspector to scan for vulnerabilities. Return to the EC2 console, and open Instances page.\nSelect the Jenkins instance.\nClick the Connect button at the top of the page.\nUnder the Session Manager tab, select Connect.\nWe will need to get the initial administrator password to log into Jenkins. sudo cat /var/lib/jenkins/secrets/initialAdminPassword\nCopy the result. This is the initial Jenkins admin password. You will need this in a later step.\nClick Terminate.\nGo back to the EC2 console, and select the Jenkins instance.\nUnder the Details tab, copy the public IP address under Public IPv4 address.\nIn a new browser tab, paste the IP address and add \u0026ldquo;:8080\u0026rdquo; to it. It should look similar to \u0026ldquo;xx.xx.xx.xx:8080\u0026rdquo;.\nInput the initial admin password from earlier, and click Continue.\nFrom the Customize Jenkins page, click Install suggested plugins.\nOnce the installation is complete, the Create First Admin User page will open. Input your information, and then select Save and Continue.\nOn the Instance Configuration page, click Save and Finish.\nOn the page displaying Jenkins is ready, click Start using Jenkins.\nFrom the navigation, open Manage Jenkins.\nUnder System Configuration, open Plugins.\nSelect Available plugins from the menu.\nSearch available plugins for Amazon Inspector Scanner.\nSelect the checkbox next to Amazon Inspector Scanner, and then click Install.\nWait for the installation to complete. At the bottom of the page, click Go back to the top page.\nFrom the navigation, click Manage Jenkins.\nUnder System Configuration, click Nodes.\nClick on Built-In Node.\nOpen Script Console from the navigation.\nIn the text box add the following line: System.setProperty(\u0026quot;hudson.model.DirectoryBrowserSupport.CSP\u0026quot;, \u0026quot;\u0026quot;)\nClick Run.\nBuild a Jenkins job Go to the Jenkins dashboard using the link in the top left, and select Create a job.\nUnder Enter an item name input \u0026ldquo;InspectorScan\u0026rdquo;.\nSelect Freestyle project, and then click OK.\nScroll down to the Build Steps section, click the dropdown Add build step, and choose Amazon Inspector Scan.\nSelect Automatic for the Inspector-sbomgen Installation Method, and then choose Linux, AMD64.\nFor Image Id, input \u0026ldquo;centos:latest\u0026rdquo;.\nFor AWS Region, select us-east-1.\nIn a new tab, open the IAM console and search for the role you created earlier named InspectorCICDscan-role. Copy the ARN. https://us-east-1.console.aws.amazon.com/iam/home?region=us-east-1#/roles/details/InspectorCICDscan-role\nPaste the ARN of your IAM role into the Jenkins build configuration page.\nClick Save.\nThis will bring you to a dashboard for your Jenkins build job. From the navigation, click Build Now to create your first build. If you run into an issue with the build, try clicking Build Now again or ask your facilitator for assistance.\nReview the build for vulnerabilities Under Build History, look for a green checkmark to indicate a successful build. Click on the green checkmark.\nThis will bring you to the console output of the Jenkins job. You can see that Inspector scanned the image and provides links to reports. Click the link next to Build Artifacts.\nClick index.html. If there are any vulnerabilities, they will show in the report.\n"
},
{
	"uri": "//localhost:1313/3/",
	"title": "Integrating AWS Services and Partner Solutions",
	"tags": [],
	"description": "",
	"content": "In this step, we will connect to our EC2 servers, located in both the public and private subnets.\nContent 3.1. Centralizing findings from AWS security services 3.2. Aggregating findings from multiple AWS accounts 3.3 Centralizing findings from AWS partner solutions 3.4 Cross-region finding aggregation 3.5 Building your own Security Hub integration\n"
},
{
	"uri": "//localhost:1313/6/6.3/",
	"title": "Respond to compromised IAM credentials",
	"tags": [],
	"description": "",
	"content": "\rScenario / Problem Statement You have been assigned a GuardDuty finding to investigate and remediate. The GuardDuty finding type is \u0026ldquo;UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom\u0026rdquo;.\nNavigate to the GuardDuty console and open the Findings page. You should see a finding that starts with \u0026ldquo;UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom\u0026rdquo;. If you do not see one, try refreshing the page. Select a finding with type \u0026ldquo;UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom\u0026rdquo; by clicking the row for that finding. This finding informs you that an API operation (for example, an attempt to launch an EC2 instance, create a new IAM user, modify AWS privileges) was invoked from an IP address that is included on a threat list that you uploaded. A threat list consists of known malicious IP addresses. This can indicate unauthorized access to AWS resources within your environment. As part of a risk driven detection strategy, your organization prioritizes AWS IAM related security alerts. You can see that the access key referenced in this finding is from an IAM assumed role, which means the Access Key credentials used to invoke these API calls belong to an IAM Role assumed by an EC2 instance. Under Instance details in the finding details, you will be able to identify the instance ID of the EC2 instance involved, as well as the IAM role (\u0026ldquo;User name\u0026rdquo;) and access key used. Make a note of the instance ID. The instance ID starts with ‘i’ (such as i-08faaaafb15777f5a). We will need this later to identify how credentials were compromised. Still under Resources affected in the finding details, make a note of the User name name that is assigned to the EC2 instance. This is the IAM Role that the access key belongs to.\nFinally, still under Resources affected in the finding details, make a note of the Access key ID.\nAt the top of the Findings page, click the bar to Add filter criteria. Select Access Key ID, paste your access key into the prompt.\nClick Apply. This will show you all of the GuardDuty findings related to that access key. If there are other findings, take a minute to investigate them.\nBefore moving on, make sure you have noted the instance ID, IAM role (\u0026ldquo;User name\u0026rdquo;), and access key ID. You will need these values later in this module.\nRespond to compromised AWS IAM credentials Now that you have identified that a temporary security credential from an IAM role for EC2 is being used by an attacker, the decision has been made to rotate the credential immediately to prevent any further misuse or potential privilege escalation. To revoke the IAM role sessions, we need to go to the AWS Identity and Access Management (IAM) console. https://console.aws.amazon.com/iamv2/home\nClick Roles on the left and find the role name you identified in the previous section using the User name you copied down earlier (this is the IAM Role attached to the compromised instance). If you don\u0026rsquo;t see it, you can use the Search field under Roles. Click on that Role Name.\nClick on the Revoke sessions tab. Then, can not access to the instance. Click on Revoke active sessions. Select the acknowledgement check box and then click Revoke active sessions. You will see a banner appear at the top of the page stating \u0026ldquo;Active sessions have been successfully revoked\u0026rdquo;. Restart the EC2 instance to rotate the access keys All active credentials for the compromised IAM role have been invalidated. This means the attacker can no longer use those access keys, but it also means that any applications that use this role can\u0026rsquo;t as well. You knew this going in but decided it was necessary due to the high risk of a compromised IAM access key. In order to ensure the availability of your application you need to refresh the access keys on the instance by stopping and starting the instance. A simple reboot will not change the keys. If you waited, the temporary security credential on the instance would be refreshed but this procedure will speed things up. Since you are using AWS Systems Manager for administration on your EC2 instances you can use it to query the metadata to validate that the access keys were rotated after the instance restart.\nOpen the Elastic Cloud Compute (EC2) console and navigate to the Instances page. https://us-east-1.console.aws.amazon.com/ec2/home?region=us-east-1#Instances:instanceState=running\nLook for the instance ID that you copied earlier in step 3. Check the box next to that instance.\nThen click the Instance state dropdown, and select Stop instance.\nA confirmation box will appear. Click Stop again.\nWait for the Instance State to say stopped under Instance State (you may need to refresh the EC2 console). You may need to remove a \u0026ldquo;running\u0026rdquo; filter on your list of instances to see the instance listed once it is stopped.\nThe check the box next to the instance, and follow the same steps to start the instance.\nVerify the access keys have been rotated Go to AWS Systems Manager and open the Session Manager page. https://us-east-1.console.aws.amazon.com/systems-manager/session-manager?region=us-east-1#\nClick Start Session on the right.\nSelect the Instance ID from earlier (that you stopped and started) by clicking on the radio button next to it. Then click Start session. This will open a shell (a session with that instance).\nRun the following two commands and compare the access key ID to the one you copied down earlier to ensure it has changed. Make sure you replace the word \u0026ldquo;ROLE\u0026rdquo; at the end of the second command below with the \u0026ldquo;User name\u0026rdquo; or IAM role that you noted in step 4.\nTOKEN=`curl -X PUT \u0026#34;http://169.254.169.254/latest/api/token\u0026#34; -H \u0026#34;X-aws-ec2-metadata-token-ttl-seconds: 21600\u0026#34;` \u0026amp;\u0026amp; curl -H \u0026#34;X-aws-ec2-metadata-token: $TOKEN\u0026#34; http://169.254.169.254/latest/meta-data/ curl -H \u0026#34;X-aws-ec2-metadata-token: $TOKEN\u0026#34; http://169.254.169.254/latest/meta-data/iam/security-credentials/ROLE Compare the AccessKeyId in the response to the Access key ID you noted earlier to confirm the successful credential rotation (they should be different). Answer: Different to the old AccessKeyID ASIAXCSEC6TNGZ6EZUUO: For further reading, check out the example Incident Response Playbook for Credential Leakage/Compromise on AWS Samples: https://github.com/aws-samples/aws-incident-response-playbooks/blob/master/playbooks/IRP-CredCompromise.md\nInvestigate the compromised role session with Amazon Detective Now that you have reviewed and remediated the GuardDuty finding \u0026ldquo;UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom\u0026rdquo;, further investigate what happened with this resource and look for any other related suspicious activity. You may opt to investigate with Detective before or after the preceeding steps.\nReturn to Amazon GuardDuty and open the same finding again. Reference the steps earlier if you forget how to open the finding, UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom.\nAt the top of the overview panel, click the link that is labeled Investigate with Detective\nIn the investigate with Detective pop up, select the Role session. Now you should be on the Role session entity page in the Detective console with the UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom finding details on the right side of the screen. Proceed to answer some questions to accelerate you to root cause in your investigate. When did this occur? The first panel in the entity overview is the Role session details. This gives you overview information about the role session related to our GuardDuty finding including associated account, assumed role, and first and last observed times.\nLook at when the role session was First observed and Last observed. How does this correspond to when the GuardDuty finding was first created and updated? This information can help you narrow down a time frame for when this role was compromised.\nGuardDuty and Detective time are not the same (GuardDuty console time is in laptop time, Detective time is in UTC). However, in GuardDuty finding json it is the same as Detective. Start from 07/17/2024 17:44 UTC In what account did this occur and what permissions did the assumed role have? Notice the AWS account under Role session details. You should check if this account includes sensitive data or production workloads by looking it up in whatever configuration management database (CMBD) or other tool you use to track this. Continue to the next step.\nLook for the link under Assumed role under Role session details and open it in a new tab. Optionally, review the findings associated with this role.\nAt the top of the page, find the link for AWS role under Role details. Open the link in a new tab. This will bring you to the IAM console.\nFrom the IAM console you will be able to determine what permissions the role has, whether there are tags that help you identify what the role is used for, and gives you a direct pivot point from Detective to revoke sessions.\nYou can close the tab with the IAM console. Return to the tab with Detective opened to the AwsRoleSession. At the top of the page, you should see \u0026ldquo;Detective \u0026gt; Search \u0026gt; AwsRoleSession\u0026rdquo;. What other findings are associated with this role session? Look at the Findings associated with this resource section. Review the findings in the order they were observed. Was there an unusual spike in successful or failed API calls? Scroll down to the Overall API call volume panel. Click Display details for scope time to see more details.\nResult: 38. Under Successful calls, click on one of the bars of API calls exceeding the baseline (blue line). Then click Set time interval. This will update the Activity for time window.\nUnder the Activity for time window, expand the dropdowns to see what IP addresses made what API calls. You can also toggle to the tabs API method by service and Access Key ID.\nUnder Failed calls, click on one of the bars of API calls that failed. Then click Set time interval. This will update the Activity for time window. Review the API calls that failed.\nOptionally, you may want to adjust the Scope time at the top of the page to determine if there was suspicious activity associated with this role before or after the GuardDuty finding?\nWas there any other new behavior detected? One avenue of investigation for a finding is to compare the activity during the finding scope time to activity that occurred before the finding was detected. Activity that has not been seen before might be more likely to be suspicious.\nSome Amazon Detective profile panels highlight activity that was not observed during the time period before the finding. Several profile panels also display a baseline value to show the average activity during the 45 days before the scope time. Scope time is the summary of activity of an entity over time.\nAs more data is extracted into your behavior graph, Detective develops a more accurate picture of what activity is normal in your organization and what activity is unusual.\nHowever, to create this picture, Detective needs access to at least two weeks of data. The maturity of the Detective analysis also increases with the number of accounts in the behavior graph.\nThe first two weeks after you activate Detective are considered a training period. During this period, profile panels that compare scope time activity to earlier activity display a message that Detective is in a training period.\nDuring the trial period, Detective recommends that you add as many member accounts as you can to the behavior graph. This provides Detective with a larger pool of data, which allows it to generate a more accurate picture of the normal activity for your organization.\nAt the top of the page, toggle to the New behavior tab. Although you will see several notifications on this page specifying \u0026ldquo;Panel in training\u0026rdquo;, take a few minutes to review various new behavior, including \u0026ldquo;Newly observed geolocations\u0026rdquo;, \u0026ldquo;Newly observed API calls\u0026rdquo;, \u0026ldquo;API calls with increased volume\u0026rdquo;, \u0026ldquo;Newly observed autonomous system organizations\u0026rdquo;, and \u0026ldquo;Newly observed user agents\u0026rdquo;. "
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.1-aws-security-hub/2.1.3-security-hub-findings/",
	"title": "Security Hub - Findings",
	"tags": [],
	"description": "",
	"content": "Findings in Security Hub Click on Findings from the navigation on the left in Security Hub. You can use filters to narrow the list of findings displayed. Click the input Add filter.\nSelect Product name and then input \u0026ldquo;GuardDuty\u0026rdquo; (case-sensitive). Click Apply. This will display all the findings that Security Hub has received from the threat detection service, GuardDuty. There are many Security Hub findings listed here. Try adding a filter to narrow the list down to high severity findings. Click the Add filters again.\nFrom the dropdown, select Severity label and choose is and then input HIGH. This is case-sensitive. Click Apply. Result: Pick one of the findings and click on the title. This opens the finding details pane. Expand all the sections and take a few minutes to review the information here. You can see the description, a link to remediation instructions, information about the resource, and more. In the finding details pane click the finding ID link at the top of the pane to display the complete JSON for the finding. The finding JSON can be downloaded to a file if ever needed for further investigation. Close out of the JSON pop-up by clicking the X in the top right. At the top of the finding details, open the History tab to view a chronological list of all changes that have been made to the finding. The transparency of finding history helps you identify potential security risks more quickly and take proactive steps to mitigate them. Close the finding details pane by clicking the X in the top right, but stay on the Findings page.\nTry to understand what resources in our environment are generating the most findings. Remove all the filters. Then add a new filter, select Resource type and choose is not and then input AwsAccount. Click Apply. Add another filter. Select Record state, choose is, and then input ACTIVE. Click Apply. Click Add filters in the search bar again. This time, select Group by and choose ResourceId. Click Apply. This list shows you the number of findings per resource. View detail by clicking Insight details: Watch other findings filtered by TTPs/Discovery/Recon:IAMUser-MaliciousIPCallerCustom provider type, produced by GuardDuty Click one finding to view more detailed. It says that an API ListBuckets was invoked by Unauthorized actors, recognized from the IP on the custom threat list bucket.\nWatch more findings produced by Inspector Those findings are created when Inspector detects vulnerabilities by scanning EC2 instances.\n"
},
{
	"uri": "//localhost:1313/4/4.3/",
	"title": "Using insights for prioritization and metrics",
	"tags": [],
	"description": "",
	"content": "\rScenario / Problem Statement: Since your team turned on various AWS security services and aggregated everything in Security Hub, your leadership is asking for insights from all that data. In particular, you have been asked to glean insights on compliance, highest priority alerts, and resources generating the highest number of security alerts.\nAn AWS Security Hub insight is a collection of related findings. It identifies a security area that requires attention and intervention. For example, an insight might point out EC2 instances that are the subject of findings that detect poor security practices. An insight brings together findings from across finding providers.\nEach insight is defined by a group by statement and optional filters. The group by statement indicates how to group the matching findings, and identifies the type of item that the insight applies to. For example, if an insight is grouped by resource identifier, then the insight produces a list of resource identifiers. The optional filters identify the matching findings for the insight. For example, you might want to only see findings from specific providers or findings that are associated with specific types of resources.\nSecurity Hub offers several built-in managed insights. You cannot modify or delete managed insights.\nAn insight only returns results if you have enabled integrations or standards that produce matching findings. For example, the managed insight 29. Top resources by counts of failed CIS checks only returns results if you enable the CIS AWS Foundations standard.\nReview the built in managed insights In Security Hub, navigate to the Insights page using the navigation on the left. Take a couple minutes to review the built-in insights.\nFrom the Insights page, find the insight named Insight: 23. Top products by counts of findings, and click the title to open it. https://us-east-1.console.aws.amazon.com/securityhub/home?region=us-east-1#/insights/arn:aws:securityhub:::insight/securityhub/default/28\nThis insight highlights how many active findings are aggregated from each product you have already integrated. Understanding your use case for each of the integrated products, this is helpful for measuring your organizations efforts to drive down the number of active vulnerabilities, threats, and resource-level compliance violations. From the Insights page, find the insight named Insight: 24. Severity by counts of findings, and click the title to open it. https://us-east-1.console.aws.amazon.com/securityhub/home?region=us-east-1#/insights/arn:aws:securityhub:::insight/securityhub/default/29\nThis insight highlights the number of active findings in your environment by severity label. These are useful numbers for reporting incremental improvement in your environment. Try to drive these numbers down over time starting with the number of findings that have a CRITICAL or HIGH severity label. Create custom insight to track number of active threats To track security issues that are unique to your AWS environment and usage, you can create custom insights. You will create custom insights to track your organization\u0026rsquo;s key metrics. The first insight you\u0026rsquo;ve decided to create will highlight the number of active threats in your environment grouped by threat purpose, resource type affected, overall malicious activity, etc. Return to the Insights page and click Create insight.\nClick Add filter. Under Filters, select Product name, and then input \u0026ldquo;GuardDuty\u0026rdquo; (it is case-sensitive). We are filtering findings down to those from GuardDuty because that is the threat detection service you are using to continuously monitor your AWS accounts and workloads for malicious activity.\nClick Add filter again, but this time select Group by under Grouping. Then select Type. One of the most useful pieces of information provided for findings by GuardDuty is the finding type. The purpose of the finding type is to provide a concise yet readable description of the potential security issue. By selecting \u0026ldquo;Group by Type\u0026rdquo; your insight will give you the count of findings matching each finding type.\nClick Create insight. For insight name, input \u0026ldquo;Security alerts by GuardDuty finding type\u0026rdquo;. 10. You can click Insight details to view the results charted at visualizations. Insights can also be fetched via Security Hub\u0026rsquo;s API. Return to the Insights page that lists out all of your insights.\nRealizing this is rather easy to set up, you should consider how to accomplish the same in every account. The answer is to use infrastructure-as-code. Since that is how to want to set up insights long-term, go ahead and delete the custom insight you just created. Search the list of insights for \u0026ldquo;Security alerts by GuardDuty finding type\u0026rdquo;.\nWhen you find it, select the small menu icon on the tile, and then click Delete.\nCloudFormation to deploy custom insights in Security Hub Scenario / Problem Statement: Having demonstrated how easy it is to get insights from Security Hub, you have been challenged to author infrastructure-as-code to deploy Security Hub custom insights to all of your organizations accounts, so each account owner can see the same insights for their individual account that the security team is rolling up for the entire organization.\nAWS CloudFormation lets you model, provision, and manage AWS and third-party resources by treating infrastructure as code. For the purposes of this module, you can use the following CloudFormation code to implement several more custom insights. You are welcome to modify it and experiment. This example template assumes Security Hub is already enabled. To make this module slightly easier, the CloudFormation template has already been staged in an S3 bucket for you.\nAWSTemplateFormatVersion: 2010-09-09\rDescription: Example template to create a Security Hub insights\rResources:\rSecurityHubInsightGDFindings:\rType: \u0026#39;AWS::SecurityHub::Insight\u0026#39;\rProperties:\rName: Security alerts by GuardDuty finding type\rFilters:\rProductName:\r- Value: GuardDuty\rComparison: EQUALS\rWorkflowStatus:\r- Value: NEW\rComparison: EQUALS\r- Value: NOTIFIED\rComparison: EQUALS\rRecordState:\r- Value: ACTIVE\rComparison: EQUALS\rGroupByAttribute: Type\rSecurityHubInsightSHControls:\rType: \u0026#39;AWS::SecurityHub::Insight\u0026#39;\rProperties:\rName: Most Failed Security Hub Controls\rFilters:\rProductName:\r- Value: Security Hub\rComparison: EQUALS\rWorkflowStatus:\r- Value: NEW\rComparison: EQUALS\r- Value: NOTIFIED\rComparison: EQUALS\rRecordState:\r- Value: ACTIVE\rComparison: EQUALS\rGroupByAttribute: GeneratorId\rSecurityHubInsightMostSev:\rType: \u0026#39;AWS::SecurityHub::Insight\u0026#39;\rProperties:\rName: Resources with the most security alerts Sev40+\rFilters:\rSeverityNormalized:\r- Gte: 40\rLte: 100\rResourceType:\r- Value: AwsAccount\rComparison: NOT_EQUALS\rWorkflowStatus:\r- Value: NEW\rComparison: EQUALS\r- Value: NOTIFIED\rComparison: EQUALS\rRecordState:\r- Value: ACTIVE\rComparison: EQUALS\rGroupByAttribute: ResourceId The template above creates three custom Security Hub insights:\nSecurity alerts by GuardDuty finding type Most failed Security Hub controls Resources with the most security alerts (medium-critical severity) Deploy your CloudFormation template with custom insights Since the CloudFormation above has already been staged in S3, open the Stacks page in the CloudFormation console.\nClick the name of the stack, cfn.\nOpen the Outputs tab. Open \u0026ldquo;InsightsCloudFormationLink\u0026rdquo; in a new tab to launch the preconfigured CloudFormation template in us-east-1 (N. Virginia). This will open the \u0026ldquo;Create stack page\u0026rdquo; in us-east-1 (N. Virginia) and populate the link to the CloudFormation template in the form. Make sure it says \u0026ldquo;N. Virginia\u0026rdquo; in top right of the page.\nClick Create stack at the bottom of the page. Wait for the template to complete deployment.\nReturn to Security Hub and open the Insights page. Find and review the insights you just created by switching the dropdown menu at the top of the page to Custom insights. For example:\n"
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.4-amazon-detective/",
	"title": "Amazon Detective",
	"tags": [],
	"description": "",
	"content": "Content Detective - Overview Detective - Summary Detective - Search Detective - Investigations Detective - Finding Groups Detective - Pricing Detective - EKS Audit Logs "
},
{
	"uri": "//localhost:1313/5/5.4/",
	"title": "Building your own automated response",
	"tags": [],
	"description": "",
	"content": "\rScenario / Problem Statement: Your manager has asked you to explore automation to remediate security findings starting with the types of findings that require the fastest time to remediation.\nUnlike how you set up the notification earlier, you may not want fully automate responses to findings. To set up automation that you can manually trigger it for specific findings, you can use custom actions. A custom action is a Security Hub mechanism for sending selected findings to EventBridge that can be matched by an EventBridge rule. The rule defines a specific action to take when a finding is received that is associated with the custom action ID. Custom actions can be used, for example, to send a specific finding, or a small set of findings, to a response or remediation workflow. You can create up to 50 custom actions.\nIn this section, we will walk you through how to create a custom action in Security Hub which will trigger an EventBridge rule to execute a Lambda function. The purpose of the Lambda function will be to alter the Security Group for an EC2 instance. This is just an example of how to build your own automations. This example is not production ready.\nCreate the Security Group Navigate to the EC2 console and open the Security Groups page using the navigation on the left.\nClick Create Security Group. Here, you will set up the Security Group you want applied to the instance during incident response. You want to limit traffic to just what is neccessary to your corporate CIDR. Set the Security group name to \u0026ldquo;IncidentResponseSG\u0026rdquo; and give it a description.\nDelete the VPC specified and select the VPC that shows \u0026ldquo;cfn-GuardDutyLabs\u0026hellip;\u0026rdquo;.\nDelete the outbound rule added by default.\nAdd 2 inbound rules so that your corporate CIDR can RDP and SSH to the instance. Follow the screenshot below.\nThe CIDR blocks are just fake examples that would represent your corporate CIDR in order to allow your security team to RDP and SSH into the instance for forensics.\nSave the Security Group by clicking Create Security Group.\nCopy the Security group ID AND the VPC ID for your new security group. You will need these IDs to complete this module. Result: Create the Lambda function Let\u0026rsquo;s create the Lambda function we will use to swap the security group on the instance. Go to https://console.aws.amazon.com/lambda/home?#/create/function?intent=authorFromScratch\nOn the Create function page, set the Function name to \u0026ldquo;IR-ChangeInstanceSecurityGroup\u0026rdquo; and pick Node.js 20.x for the Runtime. Click Create function.\nCopy and paste the following code into the editor labeled Code source (removing the existing code). Replace the value for SecurityGroupId (currently set to \u0026ldquo;sg-XXXXXXXXXXXX\u0026rdquo;) with the security group ID you noted earlier.\nimport { EC2Client, ModifyInstanceAttributeCommand } from \u0026#34;@aws-sdk/client-ec2\u0026#34;;\rconst ec2Client = new EC2Client();\rexport const handler = async (event, context) =\u0026gt; {\rtry {\rconst findings = event.detail.findings;\rconst SecurityGroupId = \u0026#34;sg-XXXXXXXXXXXX\u0026#34;;\rvar instanceARN;\rif (findings \u0026amp;\u0026amp; findings.length \u0026gt; 0){\rinstanceARN = findings[0].Resources[0].Id;\r}\rconst command = new ModifyInstanceAttributeCommand({\rInstanceId: instanceARN.split(\u0026#39;/\u0026#39;)[1],\rGroups: [SecurityGroupId]\r});\rawait ec2Client.send(command);\rreturn \u0026#39;Updated security group.\u0026#39;;\r} catch (error) {\rconsole.error(\u0026#39;Error:\u0026#39;, error);\rthrow error;\r}\r}; Then from the Code source menu, click File then Save. Then click the Deploy button. Update Lambda function permissions Directly above the Code source section for the Lambda function you created, click the Configuration tab. Then click Permissions from the left navigation appears. We need to modify the execution role for this Lambda function.\nClick the Role name. It should start with \u0026ldquo;IR-ChangeInstanceSecurityGroup-role-\u0026rdquo;. This will take you to the role in the Identity and Access Management (IAM) console. From the Role page, click the Add permissions button and select Create inline policy.\nOn the Create policy page, click the JSON tab. Then replace the existing policy with the following policy (do not use this policy in production, it does not follow least privilege).\n{\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Action\u0026#34;: [\r\u0026#34;ec2:*\u0026#34;,\r\u0026#34;ec2:Describe*\u0026#34;,\r\u0026#34;ec2:ModifyInstanceAttribute\u0026#34;\r],\r\u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;,\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;\r}\r]\r} Click the Next button. If you see a banner stating You need permissions, ignore it.\nGive your policy the name \u0026ldquo;ModifySG\u0026rdquo; and click Create policy. Create a Custom Action in Security Hub Open Security Hub. Open the Custom actions page under Management in the navigation on the left.\nClick the Create custom action button.\nEnter an Action Name, Action Description, and an Action ID that are representative of an action that you are implementing, for example, \u0026ldquo;UpdateSecurityGroup\u0026rdquo;.\nClick Create custom action. 23. Copy the Custom action ARN that was generated. You will need the Custom ARN in the next steps.\nCreate Amazon EventBridge Rule to capture the Custom Action In this section, you will define an EventBridge rule that will match events (findings) coming from Security Hub which were forwarded by the custom action you defined above.\nNavigate to the Amazon EventBridge console.\nClick on the Create rule on the right side.\nIn the Define rule detail page give your rule a name and a description that represents the rule\u0026rsquo;s purpose (for example, the same name and description you used for the custom action). Then click Next.\nAll Security Hub findings are sent as events to the AWS default event bus. The define pattern section allows you to identify filters to take a specific action when matched events appear. On the Build event pattern step, leave the Event source set to AWS events or EventBridge partner events.\nScroll down to Event pattern. Under Event source, leave it set to AWS Services, and under AWS Service, select Security Hub.\nFor the Event Type, choose Security Hub Findings – Custom Action.\nThen select the Specific custom action ARN(s) radio button and enter the ARN for the custom action that you created earlier.\nNotice that as you selected these options, the Event pattern on the right was updating. Click Next.\nOn the Select target(s) step, select Lambda function from the Select a target dropdown. Then select IR-ChangeInstanceSecurityGroup from the Function dropdown.\nClick Next.\nOn the Configure tags step, click Next.\nOn the Review and create step, click Create rule. Trigger the automation Your automation is now setup. Let\u0026rsquo;s test it on a finding for an EC2 instance. Return to the Findings page in Security Hub.\nAdd a filter for Resource Type and enter AwsEc2Instance (case sensitive). Click Apply. Add a another filter for EC2 Instance VPC ID and for input the VPC ID you noted when you created the Security Group at the start of this module. Click Apply.\nClick the title of any finding in this filtered list where the resource shows the type AwsEc2Instance.\nBefore we trigger the automation, let\u0026rsquo;s look at the current configuration the EC2 instance so that we can confirm our automation works. Expand Resources section of the finding. Click the blue link for this EC2 instance, under the heading Resource ID. This will open a new tab showing on the EC2 console showing only this EC2 instance.\nClick the instance ID, and then click the Security tab. Take note of the name of the security group. Go back to the Security Hub tab in your browser (don\u0026rsquo;t close out of the EC2 tab, you will need to return here) and click in the check box on the left side of this same finding.\nIn the Actions drop down choose the name of your custom action, Update SG. After seeing the banner display \u0026ldquo;Successfully started action\u0026hellip;\u0026rdquo; go back to the EC2 browser tab. Refresh the tab (usually after 3 minutes). Verify that the security group on the instance has been changed. "
},
{
	"uri": "//localhost:1313/3/3.4/",
	"title": "Cross-region finding aggregation",
	"tags": [],
	"description": "",
	"content": "With cross-Region aggregation, you can aggregate findings, finding updates, insights, control compliance statuses, and security scores from multiple Regions to a single aggregation Region. You can then manage all of this data from the aggregation Region.\nSuppose you set US East (N. Virginia) as an aggregation Region, and US West (Oregon) and US West (N. California) as your linked Regions. When you view the Findings page in US East (N. Virginia), you see the findings from all three Regions. Updates to those findings are also reflected in all three Regions. The enablement status of a control must be modified in each Region. If a control is enabled in a linked Region but disabled in the aggregation Region, you can see the compliance status of the control from the aggregation Region, but you cannot enable or disable that control from the aggregation Region.\nSet up cross-region finding aggregation You may have already seen a prompt to Configure finding aggregation. You can click any of them to proceed with the setup. If you didn\u0026rsquo;t notice this, open the Regions page under Settings from the navigation on the left.\nClick Configure finding aggregation. Select US East (N. Virginia) - us-east-1 as your Aggregation Region.\nSelect all of the available regions.\nClick Save at the bottom of the page. This will enable cross-region aggregation of findings, but will not actually turn on Security Hub in those other regions. Note to Participants: When you click Save to enable cross-region aggregation, it will erase the aggregated scores and control data in Security Hub. It does not remove findings or stop generating findings, but you will notice that the scores will not appear (on the Summary page, for example) until new scores are calculated based on multiple regions. You may want to do the section of the workshop titled \u0026ldquo;Security Posture Management\u0026rdquo; before completing this module.\nTurn on the AWS security services you use in the linked Region Although many AWS security services were already enabled in us-east-1 (N. Virginia) and you set up finding aggregation in Security Hub, that does not mean all of those services are turned on in the other regions you plan to operate out of. To quickly enable all the same AWS security services in us-east-2 (Ohio), use CloudFormation to deploy everything in the second Region. As soon as those services are enabled in the second region, findings from them with automatically be aggregated in Security Hub to us-east-1 (N. Virginia) thanks to the setup you already did above.\nOpen the https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/?filteringText=cfn\u0026filteringStatus=active\u0026viewNested=false page in the CloudFormation console. Click the name of the stack, cfn. Open the Outputs tab. Click the \u0026ldquo;SecurityServicesCloudFormationLink\u0026rdquo; to launch a preconfigured CloudFormation template in us-east-2 (Ohio). This will open the \u0026ldquo;Quick create stack\u0026rdquo; page in us-east-2 (Ohio) and populate the stack information and parameters. Make sure it says \u0026ldquo;Ohio\u0026rdquo; in top right of the page.\nLeave the values as is for \u0026ldquo;Stack name\u0026rdquo;, \u0026ldquo;MyAssetsBucketName\u0026rdquo;, and \u0026ldquo;MyAssetsBucketPrefix\u0026rdquo;. If there are no values present, ask your facilitator. On the bottom of the page, check the boxes next to I acknowledge that AWS CloudFormation might create IAM resources with custom names and I acknowledge that AWS CloudFormation might require the following capability: CAPABILITY_AUTO_EXPAND.\nClick Create stack. This will enable AWS Config, Security Hub, Inspector, Detective, Macie, and GuardDuty in us-east-2 (Ohio). Because you already configured finding aggregation in Security Hub, as soon as findings from any of these services appear in Security Hub in this region, they will also appear in your aggregation region. This will take a few minutes. You may continue without waiting. Return to Security Hub. If you did not switch back to the original workshop region, you will see a prompt to Go to aggregation region. Click that prompt. Make sure you are back in us-east-1 (N. Virginia) (you should see \u0026ldquo;N. Virginia\u0026rdquo; in the top right corner of your screen).\nOnce you have returned to Security Hub in your aggregation region, you\u0026rsquo;ll notice that the Findings page now includes findings from multiple regions, and the visualizations on the Summary page also highlight cross-region findings. We\u0026rsquo;ll further explore those pages later.\n(After 5 minute) "
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.4-amazon-detective/2.4.4-detective-investigations/",
	"title": "Detective - Investigations",
	"tags": [],
	"description": "",
	"content": "Ientify a resource to investigate Open the IAM console and navigate to the Roles page. https://us-east-1.console.aws.amazon.com/iam/home?region=us-east-1#/roles\nSearch for the role starting with \u0026ldquo;cfn-GuardDutyLabsInfrastructure-GeneralInstanceRole-\u0026rdquo;.\nClick the role name. Copy the ARN from the top of the page. You will need this in a later step. Running a detective investigation Open the Investigations page from the Detective console. https://us-east-1.console.aws.amazon.com/detective/home?region=us-east-1#investigations\nIn the Investigations page, choose Run investigation in the top right corner. In the Select resource section, you have three ways to run an investigation. You can choose to run the investigation for a resource recommended by Detective. You can run the investigation for a specific resource. You can also investigate a resource from the Detective Search page. Select Specify an AWS role or user with an ARN.\nUnder Select resource type select AWS role.\nUnder Resource ARN, input the ARN of the resource you identified above.\nClick Run investigation. Wait for the investigation to complete. It should display a status of \u0026ldquo;Successful\u0026rdquo; within 2-3 minutes. Click the ID of the investigation to review the results. Depending on how long this account has been provisioned, you may see \u0026ldquo;We did not observe uncommon behavior\u0026hellip;\u0026rdquo;. However, if something has been detected, you will see the report contains an Indicators of Compromise section that includes details regarding one or more indicators of compromise. Investigations summary highlights anomalous indicators that require attention, for the selected scope time. Using the summary, you can more quickly identify the root cause of potential security issues, identify patterns, and understand the resources impacted by security events.\nIf you want to find more detail about the indicator type IP address, you will see different TTPs: Indicators type TTP: "
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.2-amazon-guardduty/2.2.4-guardduty-building-your-own-threat-list/",
	"title": "GuardDuty - Building your own threat list",
	"tags": [],
	"description": "",
	"content": "Implementing a threat list with a fictitious address Navigate to Amazon S3 in the AWS console.\nFind the bucket with \u0026ldquo;-threatlistbucket-\u0026rdquo; in the name and click on the name. Here is the bucket that the AWS Workshop account has setup 3. Upload the threat list you created above to the S3 bucket. Record the S3 URI of the file you have just uploaded. To find the URI, open the bucket, click to open the file, and copy the S3 URI. Now we will add the list your uploaded to the S3 bucket to the Threat lists in GuardDuty. Return to Amazon GuardDuty.\nIn the left navigation of GuardDuty, select Lists. Click the button Add a threat IP list.\nIn the List name box, give your list a friendly name like \u0026ldquo;Test Threat List\u0026rdquo;.\nUnder location type the S3 URI for the uploaded file that you recorded earlier.\nSelect Plaintext as the Format. Click I Agree and then click Add list\nYou will need to activate the list once it has been added to GuardDuty. Select the newly added list. Click Actions, and then select Activate. A green status banner will appear saying \u0026ldquo;Successfully updated the list\u0026hellip;\u0026rdquo;.\n"
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.3-amazon-inspector/2.3.4-inspector-vulnerability-database-search/",
	"title": "Inspector - Vulnerability database search",
	"tags": [],
	"description": "",
	"content": "Search for a CVE From Inspector, open the Vulnerability database search page from the navigation on the left under Settings. https://us-east-1.console.aws.amazon.com/inspector/v2/home?region=us-east-1#/vulnerability-database-search\nInput and search for \u0026ldquo;CVE-2021-44228\u0026rdquo;.\nRead the description in the details section. Look for the CVE ID, Severity (NVD), and CVSS score V3/V2 (NVD).\nReview the Vulnerability intelligence. Finally, click the View findings button to see the findings in your account for this CVE. "
},
{
	"uri": "//localhost:1313/4/",
	"title": "Managing and Prioritizing Security Findings",
	"tags": [],
	"description": "",
	"content": "Content: 4.1 Prioritizing findings at scale with automations\n4.2 Suppressing findings at scale with automations\n4.3 Using insights for prioritization and metrics\n"
},
{
	"uri": "//localhost:1313/6/6.4/",
	"title": "Respond to a Lambda function calling malicious IP",
	"tags": [],
	"description": "",
	"content": "\rScenario / Problem Statement: You have been assigned a GuardDuty finding to investigate and remediate. The GuardDuty finding type is \u0026ldquo;UnauthorizedAccess:Lambda/MaliciousIPCaller.Custom\u0026rdquo;.\nLambda Protection helps you identify potential security threats when an AWS Lambda function gets invoked in your AWS environment. When you enable Lambda Protection, GuardDuty starts monitoring Lambda network activity logs, starting with VPC Flow Logs from all Lambda functions for account, including those logs that don\u0026rsquo;t use VPC networking, and are generated when the Lambda function gets invoked. If GuardDuty identifies suspicious network traffic that is indicative of the presence of a potentially malicious piece of code in your Lambda function, GuardDuty will generate a finding.\nGuardDuty monitors network activity logs generated by invoking the Lambda functions. Lambda Network Activity Monitoring includes Amazon VPC flow logs from all Lambda functions for your account, including those logs that don\u0026rsquo;t use VPC networking, and are subject to change, including expansion to other network activity such as DNS query data generated by invoking the Lambda functions. The expansion into other forms of network activity monitoring will increase the volume of data that GuardDuty will process for Lambda Protection. This will directly impact the usage cost of Lambda Protection. Whenever GuardDuty starts monitoring an additional network activity log, it will provide a notice to the accounts that have turned on Lambda Protection, at least 30 days prior to the release.\nCreate the Security Group Visit the Findings page in GuardDuty. https://console.aws.amazon.com/guardduty/home?#/findings?macros=current\nAdd filter criteria and select Resource type and then Lambda. Notice there is a finding for a Lambda function that is calling a malicious IP. This finding is being generated by a Lambda that is scheduled to run every 10 minutes. The function calls an IP address that is listed on the Threat IP list active in GuardDuty named \u0026ldquo;S3BadIpAddressList\u0026rdquo;.\nClick on the finding to open it and review the details. Can you locate the name of the Lambda function and the IP address it is calling from the Threat IP list? Lambda function IP: If you want to see the configuration history of the function, you can use AWS Config. AWS Config continually assesses, audits, and evaluates the configurations and relationships of your resources on AWS, on premises, and on other clouds. Open AWS Config and navigate to the Timeline for the Lambda function, or follow this link: https://console.aws.amazon.com/config/home?#/resources/timeline?resourceId=traffic-simulation\u0026resourceName=traffic-simulation Click Load more at the bottom of the page until the full history is showing. Expand the oldest CloudTrail Event, then under View event, click CloudTrail. AWS CloudTrail monitors and records account activity across your AWS infrastructure, giving you control over storage, analysis, and remediation actions.\nClick the name of the event in CloudTrail. It should start with \u0026ldquo;CreateFunction\u0026hellip;\u0026rdquo;. This will open the event record for the creation of this Lambda function. Among other things, the event record details that the function was created using CloudFormation, from a function stored in Amazon S3, by userName WSSystemRole. 8. You may optionally delete the Lambda function from the Lambda console. Otherwise, continue to the next module.\n"
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.1-aws-security-hub/2.1.4-security-hub-pricing/",
	"title": "Security Hub - Pricing",
	"tags": [],
	"description": "",
	"content": "Security Hub - Pricing During the free trial, you will get an estimate of your monthly bill if you were to continue to use Security Hub across the same accounts and Regions.\nFrom Security Hub, open the Usage page from the navigation on the left under Settings. Review your current trial usage and pricing dimensions.\n"
},
{
	"uri": "//localhost:1313/5/",
	"title": "Automating Notifications and Response",
	"tags": [],
	"description": "",
	"content": "Content: 5.1 Setting up notifications\n5.2 Set up a weekly vulnerability summary email\n5.3 Automated Security Response on AWS\n5.4 Building your own automated response\n5.5 Enriching security findings with investigative data\n"
},
{
	"uri": "//localhost:1313/3/3.5/",
	"title": "Building your own Security Hub integration",
	"tags": [],
	"description": "",
	"content": "In this module, you will build a custom solution to send findings from Security Hub to a Slack channel. To accomplish this, you will set up a custom action that will send the details of a Security Hub Finding to a Lambda function (via EventBridge) that will format the message and then post into a Slack security alerts channel. Once the setup is complete, findings will flow from left to right in the below diagram.\nSetup Slack workspace For the purposes of this workshop, we recommend setting up a new temporary Slack workspace. Use the following link to create a new Slack workspace: https://get.slack.help/hc/en-us/articles/206845317-Create-a-Slack-workspace 2. When you have finished creating your Slack workspace, create a new channel named \u0026ldquo;security-hub-alerts\u0026rdquo;. This is where we will send notifications from Security Hub using the custom integration. For this exmaple, set the channel visibility to public. Setup Slack application for integration Go to the Slack API site, https://api.slack.com. 4. At the top of the page, click Your apps. Then click Create an App.\n5. In the Create an app popup. choose From scratch.\nFor App Name input \u0026ldquo;security-hub-to-slack\u0026rdquo;. For Pick a workspace to develop your app in select the workspace you just created.\nClick Create App. Open Incoming Webhooks. On the Activate Incoming Webhooks page, switch the toggle to ON.\nThen at the bottom of the page, click Add New Webhook to Workspace. On the page that asks, \u0026ldquo;Where should security-hub-alerts post?\u0026rdquo; Select #security-hub-alerts. Click Allow.\nBack on the Incoming Webhooks page, copy the Webhook URL you just created. You will need this later.\nCreate Custom Action in Security Hub Slack is setup. Now you need to configure the Security Hub custom action, EventBridge rule, and Lambda function to push findings to your Slack app (via the webhook).\nReturn to Security Hub. https://console.aws.amazon.com/securityhub/\nOpen the Custom actions page from the navigation on the left under Management.\nClick Create custom action.\n16. For Action name input \u0026ldquo;Send to Slack\u0026rdquo;. For Description input \u0026ldquo;Custom action to send findings to Slack.\u0026rdquo; For Custom action ID input \u0026ldquo;SendToSlack\u0026rdquo;.\nCopy the Custom action ARN that was generated for Send to Slack. You will need this later. Create the EventBridge Rule Result: 18. Navigate to Amazon EventBridge.\nClick on the Create rule on the right side.\nIn the Define rule detail page give your rule a name and a description that represents the rule\u0026rsquo;s purpose (for example, the same name and description you used for the custom action). Then click Next.\nAll Security Hub findings are sent as events to the AWS default event bus. The define pattern section allows you to identify filters to take a specific action when matched events appear. On the Build event pattern step, leave the Event source set to AWS events or EventBridge partner events.\nScroll down to Event pattern. Under Event source, leave it set to AWS Services, and under AWS Service, select Security Hub.\nFor the Event Type, choose Security Hub Findings – Custom Action.\nThen select the Specific custom action ARN(s) radio button and enter the ARN for the custom action that you just created.\nClick Next.\nOn the Select target(s) step, select Lambda function from the Select a target dropdown. Then select security-hub-to-slack from the Function dropdown. The Lambda function, security-hub-to-slack, was created using CloudFormation before the start of the lab. If you want to review the code, you can see it in the Lambda console. Click Next. 28. On the Configure tags step, click Next.\nOn the Review and create step, click Create rule. Customize the Lambda function to send messages to your Slack channel Navigate to the Lambda console and open the Functions page. Open the security-hub-to-slack function by clicking on the name.\nOn the function page, open the Configuration tab and then choose Environment variables.\nClick the Edit button. Set slackChannel to \u0026ldquo;security-hub-alerts\u0026rdquo;. Set webHookUrl to the webhook you copied earlier in this module. Click Save. Test the Integration At this point, everything is setup. Test the integration!\nGo to Security Hub, and open the Findings page. https://console.aws.amazon.com/securityhub\nCheck the box next to one finding.\nUnder the Actions dropdown, choose Send to Slack. Result: Return to Slack and open the channel you created, #security-hub-alerts. You should see a new message. See that “security-hub-alerts” channel has news\nClick on that channel to view: Automate the slack messages Problem Statement: Your manager is concerned about the scalability of the appraoch you implemented because it requires you to manually select the findings to be sent to Slack. You have been instructed to automate this so findings that have MEDIUM or HIGH severity labels are automatically sent to Slack via the integration. Can you figure out what changes need to be made in order to accomplish this objective?\nHint: 6. Select Specific Severity label(s) and in the dropdown, pick MEDIUM and HIGH. That\u0026rsquo;s it. Continue through the same steps as before Click Next.\nOn the Select target(s) step, select Lambda function from the Select a target dropdown. Then select security-hub-to-slack from the Function dropdown. Click Next.\nOn the Configure tags step, click Next.\nOn the Review and create step, click Create rule. "
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.4-amazon-detective/2.4.5-detective-finding-groups/",
	"title": "Detective - Finding Groups",
	"tags": [],
	"description": "",
	"content": "Amazon Detective finding groups let you examine multiple activities as they relate to a potential security event. You can analyze the root cause for high severity GuardDuty findings using finding groups. If a threat actor is attempting to compromise your AWS environment, they typically perform a sequence of actions that lead to multiple security findings and unusual behaviors. These actions are often spread across time and entities. When security findings are investigated in isolation, it can lead to a misinterpretation of their significance, and difficulty in finding the root cause. Amazon Detective addresses this problem by applying a graph analysis technique that infers relationships between findings and entities, and groups them together. We recommend treating finding groups as the starting point for investigating the involved entities and findings.\nDetective analyzes data from findings and groups them with other findings that are likely to be related based on resources they share. For example, findings related to actions taken by the same IAM role sessions or originating from the same IP address are very likely to be part of the same underlying activity. It\u0026rsquo;s valuable to investigate findings and evidence as a group, even if the associations made by Detective aren\u0026rsquo;t related.\nIn addition to findings, each group includes entities involved in the findings. The entities can include resources outside of AWS such as IP Addresses or user agents.\nAfter an initial GuardDuty finding occurs that is related to another finding, the finding group with all related findings and all involved entities is created within 48 hours.\n"
},
{
	"uri": "//localhost:1313/5/5.5/",
	"title": "Enriching security findings with investigative data",
	"tags": [],
	"description": "",
	"content": "In today\u0026rsquo;s quickly evolving threat landscape, understanding risk and reaching the root cause of an issue in a timely manner is critical to businesses. Amazon Detective makes it easier to analyze, investigate, and quickly identify the root cause of potential security issues or suspicious activities. Amazon Detective supports the ability to automatically investigate AWS Identity and Access Management (IAM) entities for indicators of compromise (IoC). This capability helps security analysts determine whether IAM entities have potentially been compromised or involved in any known tactics, techniques, and procedures (TTP) from the MITRE ATT\u0026amp;CK framework. You can programmatically use the Detective Investigation API to help investigate potential security issues.\nSecurity Hub is a cloud security posture management tool that automatically detects when your AWS accounts and resources deviate from security best practices, aggregates security alerts into a single place and format, and understands your overall security posture across all of your AWS accounts. Security Hub gives you the option to send findings to another security solution, such as AWS Security Lake or an AWS Partner Network (APN) solution. Many customers leverage AWS Security Hub to detect security misconfigurations and to review and prioritize security findings. They prefer the simplified, centralized view of findings in Security Hub over reviewing and prioritizing findings in each of the services and regions they originate from.\nAmazon GuardDuty is an intelligent threat detection service that continuously monitors your AWS accounts, workloads, runtime activity, and data for malicious activity. If potential malicious activity, such as anomalous behavior or credential exfiltration is detected, GuardDuty generates detailed security findings. Once you enable GuardDuty and Security Hub in the same account within the same AWS Region, GuardDuty starts sending all the generated findings to Security Hub.\nIn this module, you will build a solution that integrates Detective with Security Hub giving you better visibility into threat indicators and investigative data directly from Security Hub. This allows you to perform more timely investigations of GuardDuty findings from a centralized view. The solution will perform the enrichment automatically for high and medium severity findings and gives you the flexibility to initiate additional investigations and enrichment on-demand. By enriching findings in Security Hub, you have the option of reviewing those enriched finding directly in the Security Hub console, or you can enable an integration to review the enriched findings in your solution of choice.\nThe solution architecture Security Hub automatically sends all new findings and all updates to existing findings to EventBridge as Security Hub Findings - Imported events. Each Security Hub Findings - Imported event contains a single finding. Security Hub also sends findings that are associated with custom actions to EventBridge as Security Hub Findings - Custom Action events. As shown in the architecture diagram below, you will use EventBridge Rules to invoke a Lambda function for each finding you enrich. You will use an EventBridge Rule for Imported events to automatically initiate the Lambda function for high (and medium) severity findings that are aggregated by Security Hub from GuardDuty. You will use a second EventBridge Rule for Custom Action events to initiate additional investigations and enrichment on-demand. Both EventBridge Rules will target the same Lambda function. The Lambda function calls the Detective Investigation API, waits for the results, and then calls the Security Hub API to update the finding.\nScenario / Problem Statement: Since your team turned on various AWS security services and aggregated everything in Security Hub, your leadership is asking for insights from all that data. In particular, you have been asked to glean insights on compliance, highest priority alerts, and resources generating the highest number of security alerts.\nRetrieve investigative data from Detective using Lambda You can start investigations in Detective and retrieve the results via API. To do this, you will use a Lambda function written in JavaScript (Node.js 20.x). AWS Lambda supports several programming languages, but you will use JavaScript in this example.\nTo start an investigation, you must supply the API with an Amazon Resource Name (ARN) of an IAM role or user, start time, end time, and the ARN of the Detective behavior graph. The Detective API will fetch the results of the investigation including indicators of compromise, TTPs (tactics, techniques, and procedures), and a categorical severity score. The severity score returned is computed using two dimensions; confidence and impact; where the confidence represents likelihood the events are anomalous and not normal user behavior. The second dimension is the impact; which quantifies harm that could occur from the events as a measure of TTPs’ effect.\nFirst, create the Lambda function. Go to https://console.aws.amazon.com/lambda/home?#/create/function?intent=authorFromScratch .\nOn the Create function page, set the Function name to \u0026ldquo;InvestigateWithDetective\u0026rdquo; and pick Node.js 20.x for the Runtime.\nLeave all of the other settings as they are. Click Create function.\nCopy and paste the following code into the editor labeled Code source. This will be the target of the EventBridge rule in the architecture. The function takes the ARN from a GuardDuty security finding aggregated by Security Hub, and calls the Investigation API. When the result is returned, the function formats the data into the AWS Security Finding Format (ASFF) used by Security Hub, and calls the BatchUpdateFindings API to send the enriched, updated finding back to Security Hub.\n\u0026#34;use strict\u0026#34;;\rimport {\rDetectiveClient,\rGetInvestigationCommand,\rListGraphsCommand,\rStartInvestigationCommand,\r} from \u0026#34;@aws-sdk/client-detective\u0026#34;;\rimport { BatchUpdateFindingsCommand, SecurityHubClient } from \u0026#34;@aws-sdk/client-securityhub\u0026#34;;\rconst SHClient = new SecurityHubClient();\rconst detectiveClient = new DetectiveClient();\rexport const handler = async (event) =\u0026gt; {\rtry {\r// Handle only one (the first) finding per function call\rconst finding = event.detail.findings[0];\rif (finding.ProductName != \u0026#34;GuardDuty\u0026#34;) {\r// Handle only GuardDuty findings\rthrow new Error(\u0026#34;This is not a GuardDuty finding!\u0026#34;);\r}\rconst listgraphs = new ListGraphsCommand({});\rconst graphs = await detectiveClient.send(listgraphs);\rconst graphArn = graphs.GraphList[0].Arn;\rconst IAMResourceARNs = finding.Resources.filter((resource) =\u0026gt; {\rreturn (\rresource.Type == \u0026#34;AwsIamRole\u0026#34; ||\rresource.Type == \u0026#34;AwsIamUser\u0026#34; ||\r(resource.Type == \u0026#34;AwsIamAccessKey\u0026#34; \u0026amp;\u0026amp; resource.Details.AwsIamAccessKey.PrincipalName != \u0026#34;aws:ec2-instance\u0026#34;)\r);\r}).map((resource) =\u0026gt; {\rif (resource.Type == \u0026#34;AwsIamRole\u0026#34; || resource.Type == \u0026#34;AwsIamUser\u0026#34;) {\rreturn {\rarn: resource.Id,\rtype: resource.Type == \u0026#34;AwsIamRole\u0026#34; ? \u0026#34;role\u0026#34; : \u0026#34;user\u0026#34;,\r};\r} else if (resource.Type == \u0026#34;AwsIamAccessKey\u0026#34;) {\rreturn {\rarn: `arn:aws:iam::${finding.AwsAccountId}:role/${resource.Details.AwsIamAccessKey.PrincipalName}`,\rtype: \u0026#34;role\u0026#34;,\r};\r}\r});\rif (IAMResourceARNs.length == 0) {\rthrow new Error(\u0026#34;No IAM resource to investigate!\u0026#34;);\r}\r// Investigate the first IAM role or user identified in the finding\rconst investigationTarget = IAMResourceARNs[0].arn;\rconst investigationTargetType = IAMResourceARNs[0].type;\rconst investigationEndTime = new Date(Date.now());\rinvestigationEndTime.setMinutes(investigationEndTime.getMinutes() - 5);\rlet investigationStartTime;\rif (finding.FirstObservedAt) {\rinvestigationStartTime = new Date(finding.FirstObservedAt);\r} else if (finding.CreatedAt) {\rinvestigationStartTime = new Date(finding.CreatedAt);\r} else if (finding.ProcessedAt) {\rinvestigationStartTime = new Date(finding.ProcessedAt);\r} else {\rthrow new Error(\u0026#34;Investigation start time invalid!\u0026#34;);\r}\rinvestigationStartTime.setHours(investigationStartTime.getHours() - 24);\rconst totalInvestigationTime = Math.round(\r(investigationEndTime.getTime() - investigationStartTime.getTime()) / (1000 * 60 * 60),\r); // Hours\rconst startInvestigationRequest = {\rGraphArn: graphArn,\rEntityArn: investigationTarget,\rScopeStartTime: investigationStartTime,\rScopeEndTime: investigationEndTime,\r};\rconst startinvestigation = new StartInvestigationCommand(startInvestigationRequest);\rconst investigation = await detectiveClient.send(startinvestigation);\rconst investigationId = investigation.InvestigationId;\rconst getInvestigationRequest = {\rGraphArn: graphArn,\rInvestigationId: investigationId,\r};\rlet investigationResult = { Status: \u0026#34;RUNNING\u0026#34; };\rwhile (investigationResult.Status == \u0026#34;RUNNING\u0026#34;) {\rawait new Promise((r) =\u0026gt; setTimeout(r, 30000));\rconst getinvestigation = new GetInvestigationCommand(getInvestigationRequest);\rinvestigationResult = await detectiveClient.send(getinvestigation);\rif (investigationResult.Status == \u0026#34;FAILED\u0026#34;) {\rthrow new Error(\u0026#34;Detective investigation failed!\u0026#34;);\r}\r}\rlet investigationSummary = \u0026#34;\u0026#34;;\rswitch (investigationResult.Severity) {\rcase \u0026#34;INFORMATIONAL\u0026#34;:\rcase \u0026#34;LOW\u0026#34;:\rinvestigationSummary += `We did not observe uncommon behavior for the associated ${investigationTargetType} during the ${totalInvestigationTime} hour investigation window.`;\rbreak;\rcase \u0026#34;MEDIUM\u0026#34;:\rinvestigationSummary += `We observed anomalous behavior for the associated ${investigationTargetType} during the ${totalInvestigationTime} hour investigation window which might be indicative of compromise.`;\rbreak;\rcase \u0026#34;HIGH\u0026#34;:\rcase \u0026#34;CRITICAL\u0026#34;:\rinvestigationSummary += `We observed anomalous behavior for the associated ${investigationTargetType} during the ${totalInvestigationTime} hour investigation window indicating potential compromise.`;\rbreak;\rdefault:\rthrow new Error(\u0026#34;Severity information not found!\u0026#34;);\r}\rinvestigationSummary += \u0026#34; For more information, visit \u0026#34;;\rinvestigationSummary += `https://${process.env.AWS_REGION}.console.aws.amazon.com/detective/home?region=${process.env.AWS_REGION}#investigationReport/${investigationResult.InvestigationId}`;\rconst findingUpdateInput = {\rFindingIdentifiers: [\r{\rId: finding.Id,\rProductArn: finding.ProductArn,\r},\r],\rNote: {\rText: investigationSummary.substring(0, 512),\rUpdatedBy: \u0026#34;Detective Investigation Lambda function.\u0026#34;,\r},\rUserDefinedFields: {\rinvestigate: \u0026#34;complete\u0026#34;,\r},\r};\rconst batchUpdateCommand = new BatchUpdateFindingsCommand(findingUpdateInput);\rconst updatedFinding = await SHClient.send(batchUpdateCommand);\rreturn updatedFinding;\r} catch (error) {\rconsole.error(\u0026#34;Error:\u0026#34;, error);\rthrow error;\r}\r}; Then from the Code source menu, click File then Save.\nThen click the Deploy button.\nAbove the Code source section for the Lambda function you created, click the Configuration tab.\nOn the General Configuration tab, click Edit.\nThe timeout of the function needs to be extended to a 15-minute timeout to allow Detective to complete the investigation. Update the timeout to be 15 minutes and click Save.\nDirectly above the Code source section for the Lambda function you created, click the Configuration tab.\nFor this function to work as desired, you will need to change the permissions function. The permissions need to include the necessary actions you are taking with Detective and Security Hub in the function. You need to add a new policy to the execution role for this Lambda function. Then click Permissions from the left navigation appears.\nClick the Role name. It should start with \u0026ldquo;InvestigateWithDetective-role-\u0026rdquo;. This will take you to the role in the Identity and Access Management (IAM) console. From the Role page, click the Add permissions button and select Create inline policy.\nOn the Create policy page, click the JSON tab. Then replace the existing policy with the following policy (do not use this policy in production, it does not quite follow least privilege and is meant as an example).\n{\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: [\r\u0026#34;detective:ListGraphs\u0026#34;,\r\u0026#34;detective:searchGraph\u0026#34;,\r\u0026#34;detective:StartInvestigation\u0026#34;,\r\u0026#34;detective:UpdateInvestigationState\u0026#34;,\r\u0026#34;detective:GetInvestigation\u0026#34;,\r\u0026#34;detective:ListInvestigations\u0026#34;,\r\u0026#34;detective:ListIndicators\u0026#34;,\r\u0026#34;securityhub:BatchUpdateFindings\u0026#34;,\r\u0026#34;securityhub:UpdateFindings\u0026#34;\r],\r\u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;\r}\r]\r} Click the Next button. If you see a banner stating You need permissions, ignore it.\nGive your policy the name \u0026ldquo;DetectiveSecurityHubIntegration\u0026rdquo; and click Create policy. Set up automated investigations and finding enrichment with easy to configure filters Now that you have GuardDuty, Security Hub, and Detective enabled (this was done for you) and have set up the Lambda function, you are ready to set up the two methods of initiating the investigations. The first approach involves automatically investigating and enriching HIGH and MEDIUM severity GuardDuty findings. This will accelerate investigations for the highest severity findings because you don’t need to go into Security Hub or Detective and manually select the findings for investigation.\nIn this approach, you will initiate the Lambda function you previously set up by using Security Hub Automations and an EventBridge Rule. Using Security Hub Automations allows you to configure and update what findings get automatically investigated and enriched without ongoing code changes (automation rules use a UI with dropdown options for criteria).\nOpen Security Hub and go to the Automations page.\nClick Create rule.\nSelect Create custom rule. Name your rule \u0026ldquo;Automated Investigation\u0026rdquo; and give the rule a description.\nUnder Criteria, select ProductName for Key, Equals for Operator, and input \u0026ldquo;GuardDuty\u0026rdquo; for Value.\nClick Add criteria.\nFor the second criteria, select SeverityLabel for Key, Equals for Operator, and HIGH for Value.\nThen under that criteria, click the text, Add another value. This time select Equals for Operator and MEDIUM for Value.\nClick Add criteria a third time. This time, select ResourceType for Key, Equals for Operator, and input \u0026ldquo;AwsIamAccessKey\u0026rdquo; for Value (case-sensitive).\nUnder the ResourceType criteria, click Add another value twice to add two more values. Use the operator Equals for both. Then use the Values \u0026ldquo;AwsIamUser\u0026rdquo; and \u0026ldquo;AwsIamRole\u0026rdquo;, respectively. Make sure the Criteria section matches the screenshot below.\n(Index by workshop, not mistake)\nScroll down to the Automated action section and click Add another key-value pair. This is how you will set a user-defined field to flag findings you want automatically investigated.\nFor the Key, input \u0026ldquo;investigate\u0026rdquo;, and for the Value, input \u0026ldquo;true\u0026rdquo;. Leave all of the other field as they are.\nAt the bottom of the page, click Create rule. Next, you need to set an EventBridge Rule to determine which findings are investigated based on the user-defined field, you can use a single rule in Amazon EventBridge. In this case, the EventBridge Rule will look for Security Hub Findings – Imported. Each Security Hub Findings - Imported event contains a single finding. However, you only want to match findings that contain the user-defined field, \u0026ldquo;investigate\u0026rdquo;. Navigate to EventBridge.\nClick Create rule under Get started (with EventBridge Rule selected).\nOn the Define rule detail page, give your rule a name and description. For Name, input \u0026ldquo;AutomatedInvestigation\u0026rdquo;. Then click Next. On the Build event pattern step, scroll down to Event pattern. Select the method Custom pattern (JSON editor). Copy and paste the following JSON into the Event pattern field.\n{\r\u0026#34;source\u0026#34;: [\u0026#34;aws.securityhub\u0026#34;],\r\u0026#34;detail\u0026#34;: {\r\u0026#34;findings\u0026#34;: {\r\u0026#34;UserDefinedFields\u0026#34;: {\r\u0026#34;investigate\u0026#34;: [\u0026#34;true\u0026#34;]\r}\r}\r}\r} Click Next. On the Select target(s) step, select Lambda function from the Select a target dropdown. Then select InvestigateWithDetective from the Function dropdown.\nClick Next. On the Configure tags step, click Next.\nOn the Review and create step, click Create rule. As new findings are aggregated in Security Hub, they will be evaluated and updated by the automation rule. Any that receive the user-defined field will initiate the Lambda function. After initiating the Lambda, it can take a couple minutes for the execution to complete and appear in Security Hub. Note to Participants: It may be awhile before a finding is updated or created, which would initiate this automation. Move on with the instructions for now. In the next section, you will set up an process for initiating finding investigation and enrichment on-demand.\nSet up on-demand finding investigation and enrichment The second approach involves investigating and enriching findings on-demand. You may want both approaches in case there are findings that don’t meet the criteria of your earlier automation that you still want to investigate.\nIn this approach, you will initiate the same Lambda function through the use of a feature in Security Hub called Custom Actions. Open Security Hub and go to the Custom actions page.\nClick Create custom action.\nFor Action name input \u0026ldquo;Investigate\u0026rdquo;. For Action Description input \u0026ldquo;Investigate with Detective\u0026rdquo; For Action ID input \u0026ldquo;investigate\u0026rdquo;.\nClick Create custom action. Copy the Custom action ARN that was generated for your custom finding. You will need this in a few steps.\nNext, you will need to create another rule in EventBridge, but this time it will match events for your custom action. Navigate to EventBridge.\nClick Create rule under Get started (with EventBridge Rule selected).\nOn the Define rule detail page, give your rule a name and description. For Name, input \u0026ldquo;InitiatedAutomatedInvestigation\u0026rdquo;. Then click Next. On the Build event pattern step, scroll down to Event Pattern. Leave the Event source set to AWS Services. Scroll down to Event pattern. Under Event source, select Security Hub.\nFor the Event Type, choose Security Hub Findings – Custom Action.\nThen select the Specific custom action ARN(s) radio button and input the ARN for the custom action that you created earlier.\nClick Next. On the Select target(s) step, select Lambda function from the Select a target dropdown. Then select InvestigateWithDetective from the Function dropdown.\nClick Next. On the Configure tags step, click Next.\nOn the Review and create step, click Create rule. Initiate an on-demand finding investigation Return to Security Hub. Open the Findings page.\nIn the Add filter input, add a filter for Resource Type. Set the filter to Resource Type is AwsIamAccessKey (case sensitive). Click Apply.\nIn the Add filter input, add a filter for Product Name. Set the filter to Product Name is GuardDuty (case sensitive). Click Apply. Click the title of the a finding in the list and check if there are any Notes present. If there are, expand the section and see what the notes are (if present, can you tell where the note came from?). Note: Do not select the finding regarding RegisterManagedInstance. Click the check box to the left of this same finding to select it.\nIn the Actions dropdown, select your new custom action (Investigate). Choose another finding to investigate: After 3 minutes: This may take up to 15 minutes for the investigation to complete. Refresh the page every couple minutes until the finding has a new Notes section in the details. Click the title of the same finding and expand the Notes section. Waiting after 5 minutes to see the node update: You can also toggle to the History tab in the finding details to see the timestamped event with the Note change.\nSurface investigated findings in a custom insight If you want to easilly track resources and findings that have been investigated through either of the approaches you implemented, create a new custom insight in Security Hub. Open Security Hub and go to the Insights page.\nClick Create insight.\nClick the field that states \u0026ldquo;Add filter\u0026rdquo; at the top of the page and select User defined fields.\nSet Key to investigate and Value to complete. This will filter the list of findings to only those that were successfully enriched. Click Apply. Result: Click the field that states \u0026ldquo;Add filter\u0026rdquo; at the top of the page again and select GroupBy. Then pick Resource ID. Click Apply. The insight is now showing a list of resources and a count of how many active, associated findings are investigated and enriched. Click Create insight. Name your insight \u0026ldquo;Investigated Resources\u0026rdquo; and click Create insight again. At the top of the page, click Insight details to see the graphs for the new insight.\n"
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.2-amazon-guardduty/2.2.5-guardduty-suppressing-findings/",
	"title": "GuardDuty - Suppressing findings",
	"tags": [],
	"description": "",
	"content": "Configure a rule to suppress unwanted findings for your vulnerability assessment tool From the GuardDuty console, open the Findings page.\nClick the button, Suppress Findings. The suppression rule should consist of two filter criteria. The first criteria should use the Finding type attribute with a value of Recon:EC2/Portscan. In the field Add filter criteria, select Finding Type and type \u0026ldquo;Recon:EC2/Portscan\u0026rdquo;. Click Apply.\nNotice that after adding the first filter, the preview at the bottom of the page shows the finding(s) that would be suppressed by this rule. To ensure that you don\u0026rsquo;t accidently suppress a finding you want to be alerted to, add a second filter criteria to narrow the rule.\nThe second filter criteria should match the instance or instances that host these vulnerability assessment tools. You can use either the Instance image ID attribute or the Tag value attribute depending on which criteria are identifiable with the instances that host these tools. Click Add filter criteria again, and select Instance Tag Value and type \u0026ldquo;Scanner\u0026rdquo;. Click Apply. Notice that only one finding will be suppressed by this rule.\nEnter \u0026ldquo;VulnerabilityAssessmentTool\u0026rdquo; in the Name field. Enter \u0026ldquo;Suppress findings from Vulnerability Assessment Tool.\u0026rdquo; in the Description field. Click Save.\n"
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.3-amazon-inspector/2.3.5-inspector-suppressing-findings/",
	"title": "Inspector - Suppressing findings",
	"tags": [],
	"description": "",
	"content": "Use suppression rules to exclude findings that match criteria. For example, you can create a rule that suppresses all findings with low vulnerability scores, so you can focus only on findings that are most critical.\nSuppression rules are only used to filter your list of findings and don\u0026rsquo;t have any impact on findings or prevent Amazon Inspector from generating findings.\nIf Amazon Inspector generates findings that matches a suppression rule, the findings are set to Suppressed. Findings that match a suppression rule don\u0026rsquo;t appear in your list by default.\nAmazon Inspector stores suppressed findings until they\u0026rsquo;re remediated. Amazon Inspector detects remediated findings. When Amazon Inspector detects a remediated finding, it sets the finding to Closed and stores it for 7 days.\nSuppressed findings are published to AWS Security Hub and Amazon EventBridge as events. You can automatically suppress unwanted findings in Security Hub by changing the status of the findings using an EventBridge rule.\nYou can\u0026rsquo;t create a suppression rule that closes or remediates findings. You can only create a suppression rule to filter which findings appear in your list. You can view suppressed findings at any time in the Amazon Inspector console.\nMember accounts in an organization can\u0026rsquo;t create or manage suppression rules.\nConfigure a rule to suppress low vulnerability findings in dev Click on Suppression rules from the navigation on the left in Inspector.\nClick on Create Rule. Enter \u0026ldquo;Low Severity - Dev Environment\u0026rdquo; in the Name field.\nEnter \u0026ldquo;Suppress all findings with a low severity score for resources tagged with Development\u0026rdquo; in the Description field. Under Suppression rule filters select Severity and check the box for Low. Click Apply. Then click to add another filter and select Resource tag under EC2. Input \u0026ldquo;Environment\u0026rdquo; for the key and \u0026ldquo;Development\u0026rdquo; for the value. Click Apply.\nClick Save. Result: You can view suppressed findings in the All Findings page by switching from Active to Suppressed in the dropdown.\n"
},
{
	"uri": "//localhost:1313/6/6.5/",
	"title": "Respond to Malware on Amazon Elastic Block Store",
	"tags": [],
	"description": "",
	"content": "\rScenario / Problem Statement: You have been tasked with determining (and investigating) if GuardDuty has detected malware on Amazon Elastic Block Store (Amazon EBS) volumes that are attached to the Amazon Elastic Compute Cloud (Amazon EC2) instances and container workloads.\nBefore you begin, confirm that Malware Protection is setup in your account. Navigate to the GuardDuty console and open the Malware Protection page.\nConfirm that \u0026ldquo;GuardDuty-initiated malware scan is enabled\u0026rdquo;. Malware Protection helps you detect the potential presence of malware by scanning the Amazon Elastic Block Store (Amazon EBS) volumes that are attached to the Amazon Elastic Compute Cloud (Amazon EC2) instances and container workloads.\nGuardDuty provides you with the option to retain the snapshots of your EBS volumes in your AWS account when malware is found. By default, the snapshots retention setting is turned off. The snapshots will only be retained if you have this setting turned on before the scan initiates. If you turn on the snapshots retention setting for your account, when malware is found and the snapshots get retained, you will incur usage cost for the same. Toggle the \u0026ldquo;Retain scanned snapshots when malware is detected\u0026rdquo; on under General settings.\nInvestigate Malware detected by GuardDuty Malware Protection offers two types of scans to detect potentially malicious activity in your Amazon EC2 instances and container workloads – GuardDuty-initiated malware scan and On-demand malware scan. A GuardDuty-initiated malware scan gets invoked when GuardDuty detects suspicious behavior indicative of malware on Amazon EC2 instance or container workloads. Review findings that invoke GuardDuty-initiated malware scan to learn about such GuardDuty findings that can initiate a malware scan. These findings are referred to as trigger findings in this workshop. A new Malware Protection finding is generated for each scan that detects malware.\nOpen the Findings page in GuardDuty.\nIn the field Add filter criteria select Finding Type and type \u0026ldquo;Execution:EC2/MaliciousFile\u0026rdquo;. Click Apply. Result: Click on one of the matching findings to view details. Take a few minutes to review the finding and identify the affected EC2 instance, the malware file path and file name, and other information about the finding.\naffected instance: i-0c79413d9f0d9941e\nMalware file path: /eicar.com\nMalware file name: eicar.com\nIf you update the Finding Type filter to \u0026ldquo;Execution:ECS/MaliciousFile\u0026rdquo;, you will see malware findings for containers.\nClick the \u0026ldquo;Scan ID\u0026rdquo; link from the finding details to get further details of the scan. The link will take you to the malware scans page. Click again on the scan ID. Here you will see additional details such as the scanned volume size, the volume that is infected and the time it took to run the scan. You will also see the the Finding ID of the trigger finding that invoked the scan. View the finding:\n{\r\u0026#34;DetectorId\u0026#34;: \u0026#34;c8c860de84297606e66fe1417c3ba44a\u0026#34;,\r\u0026#34;AdminDetectorId\u0026#34;: \u0026#34;c8c860de84297606e66fe1417c3ba44a\u0026#34;,\r\u0026#34;ScanId\u0026#34;: \u0026#34;4b879e92a6a795433e66f10c577ef4e6\u0026#34;,\r\u0026#34;ScanStatus\u0026#34;: \u0026#34;COMPLETED\u0026#34;,\r\u0026#34;ScanStartTime\u0026#34;: \u0026#34;2024-07-17T17:50:12.000Z\u0026#34;,\r\u0026#34;ScanEndTime\u0026#34;: \u0026#34;2024-07-17T18:02:01.000Z\u0026#34;,\r\u0026#34;TriggerDetails\u0026#34;: {\r\u0026#34;GuardDutyFindingId\u0026#34;: \u0026#34;72c860e606f07b17804e7bf1b92dd4e4\u0026#34;\r},\r\u0026#34;ResourceDetails\u0026#34;: {\r\u0026#34;InstanceArn\u0026#34;: \u0026#34;arn:aws:ec2:us-east-1:486547846362:instance/i-0c79413d9f0d9941e\u0026#34;\r},\r\u0026#34;ScanResultDetails\u0026#34;: {\r\u0026#34;ScanResult\u0026#34;: \u0026#34;INFECTED\u0026#34;\r},\r\u0026#34;AccountId\u0026#34;: \u0026#34;486547846362\u0026#34;,\r\u0026#34;TotalBytes\u0026#34;: 2619136718,\r\u0026#34;FileCount\u0026#34;: 50898,\r\u0026#34;AttachedVolumes\u0026#34;: [\r{\r\u0026#34;VolumeArn\u0026#34;: \u0026#34;arn:aws:ec2:us-east-1:486547846362:volume/vol-0179bcf64ae7ccba7\u0026#34;,\r\u0026#34;VolumeType\u0026#34;: \u0026#34;gp3\u0026#34;,\r\u0026#34;DeviceName\u0026#34;: \u0026#34;/dev/xvda\u0026#34;,\r\u0026#34;VolumeSizeInGB\u0026#34;: 8,\r\u0026#34;EncryptionType\u0026#34;: \u0026#34;UNENCRYPTED\u0026#34;,\r\u0026#34;SnapshotArn\u0026#34;: \u0026#34;arn:aws:ec2:us-east-1:486547846362:snapshot/snap-0c07cebc08b3eae39\u0026#34;\r}\r],\r\u0026#34;ScanType\u0026#34;: \u0026#34;GUARDDUTY_INITIATED\u0026#34;\r} The possible values for scan Status are Completed, Running, Skipped, and Failed. After the scan completes, the Scan result is populated for scans that have the Status as Completed. Possible values for Scan result are Clean and Infected. Using Scan type, you can identify if the malware scan was GuardDuty initiated or On demand.\nSelect the link next to Finding ID. This will take you to a new page that displays only the trigger finding. Then select the finding and explore details about the trigger finding. The trigger finding also has a section titled Malware scan that lists details about the scan. For each Amazon EC2 instance and container workload for which GuardDuty generates findings, an automatic GuardDuty-initiated malware scan gets invoked once every 24 hours. If multiple trigger findings are generated in a 24-hour period for an EC2 instance, only the first trigger finding will invoke a scan.\nIf this was the only EC2 instance that was compromised, you could proceed to investigate and isolate the instance following an incident response playbook (this is out of scope for this module). If you enabled the setting to retain snapshots for EBS volumes, these snapshots will be retained in your account only when malware is found, you can use these snapshots for further investigations. [Optional] Initiating a Malware scan on-demand If you want to detect the presence of malware in your Amazon EC2 instances on-demand, you can initiate an on-demand malware scan by providing the Amazon Resource Name (ARN) of the Amazon EC2 instance that you want to scan. You can also run an on-demand malware scan after you have remediated the files identified by GuardDuty as part of a previous malware finding and want to verify the file is no longer present.\nFrom the Findings page, open one of the Execution:EC2/MaliciousFile findings to view the details again.\nYou need the Amazon Resource Name (ARN) of the EC2 instance in order to initiate an on-demand malware scan. The ARN looks like \u0026ldquo;arn:aws:ec2:{region}:{account ID}:instance/{instance ID}\u0026rdquo;. Construct the ARN using the information from the finding. Your resource ID should look like \u0026ldquo;arn:aws:ec2:us-east-1:012345678901:instance/i-123456xxyyzzaaabb2\u0026rdquo;\nOpen the Malware scans page from the navigation on the left.\nClick the Start new on-demand scan button.\nInput the EC2 instance ARN, then click Confirm. Now refresh the page, you will see a new scan ID with scan type as ‘On demand’ with a scan status of ‘Running’.\n"
},
{
	"uri": "//localhost:1313/6/6.6/",
	"title": "Respond to Malware on Amazon Elastic Block Store",
	"tags": [],
	"description": "",
	"content": "\rScenario / Problem Statement: In an earlier module, \u0026ldquo;Building your own automated response\u0026rdquo;, you explore methods of automated response. This module is related, but rather on focusing on automated respond, your task is to investigate a potentially compromised EC2 instance associated with a \u0026ldquo;UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom\u0026rdquo; GuardDuty finding. For this, you will use Amazon Detecitve.\nOpen Amazon GuardDuty select a finding titled UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom to open the finding details. At the top of the overview panel, click the link that is labeled Investigate with Detective\nIn the investigate with Detective pop up, select EC2 Instance to investigate the compromised EC2 instance. Now you should be on the EC2 instance entity page in the Detective console with the UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom finding details on the right side of the screen. Proceed to answer some questions to accelerate you to root cause in your investigate.\nNote that the scope time at the top of the page is set from when the event was first seen to the time the event was last seen by GuardDuty. This is important to understand because the scope time determines the data set that Detective is returning to you. Look at the information presented in the top panel, EC2 instance details. AWS account, EC2 instance, Role, Associated VPC, and other information is listed. You can optionally click the links to pivot and learn more about the linked entities. For example, you could follow the linked role to understand the permissions of the role used by the EC2 instance or to see if there are other findings related to the role.\nIf you are interested in exlploring more of the information presented on this page, you should also complete the module titled: Respond to compromised IAM credentials.\nScroll down. Look at the Findings associated with this resource section. Review the findings in the order they were observed. Check out Overall VPC flow volume. Click on a spike in Inbound traffic and then click Set time interval. Review the Activity for time window. This shows the VPC flow data into and out of the EC2 instance. The Activity for time window will automatically adjust the time to the scope time of the column and list the IP address, ports, volume of inbound and outbound traffic, protocol and notate if the traffic was accepted or rejected. You can also check out the Distinct count of ports over time, Distinct IP addresses over time, and Observed IP address assignments based on VPC Flow. Scroll up to the top of the EC2 instance entity page and select the tab labeled New behavior. In this tab Detective develops a picture of what activity is normal in your organization and what activity is unusual. Scroll through the different panels to determine what information you might be able to gather related to investigating a security issue. Check one IP: Set time interval to monitor: More detail: Search for the IP address of the actor In the GuardDuty finding details on the left, note the IP address V4 listed under Actor. Open the Search page from the navigation panel on the right.\nClick on the Choose type drop down and choose IP address.\nInput the IP address you noted from the GuardDuty finding details. Click Search. Select the IP address hyperlink to navigate to the IP address entity page. Just like in previous steps, take the to review information about the IP address. Search the page for:\nFirst observed: 00:17 UTC Total times observer: last obser – first observe\nLast obser is 18:42 UTC so total time is 25 But different with the overview Findings associated with this resource Overall API call volume Also explore the tabs, New behavior, Resource interaction, and Kubernetes activity. Resource interaction: New behavior: 18. In this scenario, you used Amazon Detective to find information to help with investigating a security issue with limited data. In a production environment with more data you will be able to leverage Detective even more effectively for things like newly observed activity, resource interaction, and traffic baselining. Now that you have used Amazon Detective to gather more information about the extent of the security issue you will have a better understanding of other resources that need to be remediated, permissions that need to be scoped down, and root cause analysis information to include in after action reports.\n"
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.1-aws-security-hub/2.1.5-security-hub-notifications/",
	"title": "Security Hub - Notifications",
	"tags": [],
	"description": "",
	"content": "Configure SNS topic Navigate to Amazon SNS. https://console.aws.amazon.com/sns/v3/home 2. Click Topics in the left navigation. Click Create topic. Select Standard type. For the name, enter \u0026ldquo;security-hub-findings\u0026rdquo;. Leave everything else as is and click Create topic at the bottom of the page. This will create the topic. Sbscribe to the topic From the security-hub-findings topic page, click Create subscription. On the Create subscription page, under Protocol, select email. On the Create subscription page, under Endpoint, enter your email address that you want to use for this workshop to receive notifications. You can unsubscribe at the end of the workshop.\nClick Create subscription. Check the email you entered. Within a couple minutes, you will receive an email at the email address you entered. Confirm the subscription by clicking \u0026ldquo;Confirm subscription\u0026rdquo; in the email. This will open a confirmation webpage. Create an EventBridge Rule to send findings to the topic Now that you have subscribed to the SNS topic, you are ready to send findings there. Create an EventBridge rule to listen for events from Security Hub. Navigate to Amazon EventBridge. https://console.aws.amazon.com/events/home Click the Create rule button on the right with \u0026ldquo;EventBridge Rule\u0026rdquo; selected. On the Define rule detail page, name your rule \u0026ldquo;security-hub-findings\u0026rdquo;. Click Next. On the Build event pattern page, scroll down to the Event pattern section, click Edit pattern in the bottom right.\nAdd the following event pattern (JSON). This pattern will identify events for Security Hub findings labeled CRITICAL severity.\n{ \u0026#34;source\u0026#34;: [ \u0026#34;aws.securityhub\u0026#34; ], \u0026#34;detail-type\u0026#34;: [ \u0026#34;Security Hub Findings - Imported\u0026#34; ], \u0026#34;detail\u0026#34;: { \u0026#34;findings\u0026#34;: { \u0026#34;ProductName\u0026#34;: [ \u0026#34;Security Hub\u0026#34; ], \u0026#34;Severity\u0026#34;: { \u0026#34;Label\u0026#34;: [ \u0026#34;CRITICAL\u0026#34; ] } } } } Click Next. On the Select target(s) page, from the Select a target dropdown, select SNS topic. Then from the Topic dropdown, select security-hub-findings. Click Next.\nOn the Configure tags - optional page, click Next.\nOn the Review and create page, click Create rule. Keep an eye on your email through the rest of the workshop. View the created rule: "
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.4-amazon-detective/2.4.6-detective-pricing/",
	"title": "Detective - Pricing",
	"tags": [],
	"description": "",
	"content": "Security Hub - Pricing The GuardDuty console indicates how many days are left in the free trial as well as average daily cost (based on volume of data analyzed and scanned), taking the guesswork out of budget planning.\nFrom Detective, open the Usage page from the navigation on the left under Settings. Review your current trial usage and estimated cost. The estimates displayed in the GuardDuty console may differ slightly than those in your AWS Billing and Cost Management console. For more information, see https://docs.aws.amazon.com/guardduty/latest/ug/monitoring_costs.html.\n"
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.2-amazon-guardduty/2.2.6-guradduty-pricing/",
	"title": "GuradDuty - Pricing",
	"tags": [],
	"description": "",
	"content": "Security Hub - Pricing The GuardDuty console indicates how many days are left in the free trial as well as average daily cost (based on volume of data analyzed and scanned), taking the guesswork out of budget planning.\nFrom GuardDuty, open the Usage page from the navigation on the left under Settings. Review your current trial usage and estimated cost. The estimates displayed in the GuardDuty console may differ slightly than those in your AWS Billing and Cost Management console. For more information, see https://docs.aws.amazon.com/guardduty/latest/ug/monitoring_costs.html.\n"
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.3-amazon-inspector/2.3.6-inspector-pricing/",
	"title": "Inspector - Pricing",
	"tags": [],
	"description": "",
	"content": "Inspector - Pricing You can review estimated spend in the Amazon Inspector console, including aggregated organization-wide spend in the central Amazon Inspector administrator account. This way, you can understand and estimate the cost of using Amazon Inspector for automated and continual vulnerability scans across EC2, Amazon ECR, and Lambda functions for your entire organization before moving to paid usage.\nFrom Inspector, open the Usage page from the navigation on the left under General Settings.\nReview your projected cost. Projected cost is based on account usage for the last 30 days. If the account has been active with Inspector for less than 30 days, we extrapolate the costs for 30 days based on the current usage.\n"
},
{
	"uri": "//localhost:1313/6/",
	"title": "Security Simulations and Scenarios",
	"tags": [],
	"description": "",
	"content": "6.1 Respond to IAM Role credential exfiltration\n6.2 Respond to a compromised S3 Bucket\n6.3 Respond to compromised IAM credentials\n6.4 Respond to a Lambda function calling malicious IP\n6.5 Respond to Malware on Amazon Elastic Block Store 6.6 Respond to a compromised EC2 instance\n"
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.4-amazon-detective/2.4.7-detective-eks-audit-logs/",
	"title": "Detective - EKS Audit Logs",
	"tags": [],
	"description": "",
	"content": "Add EKS audit logs as an optional data source Open the Detective console. https://us-east-1.console.aws.amazon.com/detective/home?region=us-east-1#summary\nFrom the navigation panel under Settings, choose General.\nClick Edit next to Optional source packages. Make sure there is a checkbox next to EKS audit logs. "
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.2-amazon-guardduty/2.2.7-guardduty-notifications/",
	"title": "GuardDuty - Notifications",
	"tags": [],
	"description": "",
	"content": "Configure SNS topic Navigate to Amazon SNS. https://console.aws.amazon.com/sns/v3/home 2. Click Topics in the left navigation. Click Create topic. Select Standard type.\nFor the name, enter \u0026ldquo;guardduty-findings\u0026rdquo;. Leave everything else as is and click Create topic at the bottom of the page. This will create the topic. Sbscribe to the topic From the guardduty-findings topic page, click Create subscription. On the Create subscription page, under Protocol, select email. On the Create subscription page, under Endpoint, enter your email address that you want to use for this workshop to receive notifications. You can unsubscribe at the end of the workshop.\nClick Create subscription. Check the email you entered. Within a couple minutes, you will receive an email at the email address you entered. Confirm the subscription by clicking \u0026ldquo;Confirm subscription\u0026rdquo; in the email. This will open a confirmation webpage. Create an EventBridge Rule to send findings to the topic Now that you have subscribed to the SNS topic, you are ready to send findings there. Create an EventBridge rule to listen for events from Security Hub. Navigate to Amazon EventBridge. https://console.aws.amazon.com/events/home Click the Create rule button on the right with \u0026ldquo;EventBridge Rule\u0026rdquo; selected. On the Define rule detail page, name your rule \u0026ldquo;guardduty-findings\u0026rdquo;. Click Next. On the Build event pattern page, scroll down to the Event pattern section, click Edit pattern in the bottom right. Add the following event pattern (JSON). This pattern will identify events for Security Hub findings labeled CRITICAL severity.\n{ \u0026#34;source\u0026#34;: [\u0026#34;aws.guardduty\u0026#34;], \u0026#34;detail-type\u0026#34;: [\u0026#34;GuardDuty Finding\u0026#34;], \u0026#34;detail\u0026#34;: { \u0026#34;severity\u0026#34;: [ 4, 4.0, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5, 5.0, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6, 6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7, 7.0, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8, 8.0, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9 ] } } Click Next.\nOn the Select target(s) page, from the Select a target dropdown, select SNS topic.\nThen from the Topic dropdown, select guardduty-findings. Click Next.\nOn the Configure tags - optional page, click Next.\nOn the Review and create page, click Create rule. Keep an eye on your email through the rest of the workshop. "
},
{
	"uri": "//localhost:1313/7/",
	"title": "Software Vulnerability Management",
	"tags": [],
	"description": "",
	"content": "Content: 7.1 Patching EC2 with Patch Manager\n7.2 Vulnerability management for serverless applications\n7.3 Integrating Amazon Inspector into a CI/CD pipeline\n"
},
{
	"uri": "//localhost:1313/8/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "We will take the following steps to delete the resources we created in this exercise.\nDelete Automated Security Response solution Remove the aws-sharr-member.template from each member account.\nRemove the aws-sharr-admin.template from the admin account.\nRemove SO0111-* IAM roles.\nRemove CloudWatch logging.\nDisable AWS Security Hub Go to General page of Security Hub. Click Disable AWS Security Hub. There is a popup, click Disable AWS Security Hub. Delete related services Disable GuardDuty. Disable Inspector. Disable Detective. "
},
{
	"uri": "//localhost:1313/2-introduction-to-threat-detection-and-response-services/2.2-amazon-guardduty/2.2.8-guardduty-retaining-findings/",
	"title": "GuardDuty - Retaining findings",
	"tags": [],
	"description": "",
	"content": "GuardDuty retains the generated findings for a period of 90 days. GuardDuty exports the active findings to Amazon EventBridge. You can optionally export the generated findings to an Amazon Simple Storage Service (Amazon S3) bucket. This will help you to track the historical data of potentially suspicious activities in your account and evaluate whether the recommended remediation steps were successful.\nAny new active findings that GuardDuty generates are automatically exported within about 5 minutes after the finding is generated. You can set the frequency for how often updates to the active findings are exported to EventBridge. The frequency that you select applies to the exporting of new occurrences of existing findings to EventBridge, your S3 bucket (when configured), and Detective (when integrated).\nWhen you configure settings to export findings to an Amazon S3 bucket, GuardDuty uses AWS Key Management Service (AWS KMS) to encrypt the findings data in your S3 bucket. This requires you to add permissions to your S3 bucket and the AWS KMS key so that GuardDuty can use them to export findings in your account.\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]